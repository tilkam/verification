<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetAlertInformation 2.0" resourceRoot="${projectDir}" soapui-version="5.6.1" abortOnError="false" runType="SEQUENTIAL" id="254d4317-05ec-4130-805b-fe18e36f0aee" xmlns:con="http://eviware.com/soapui/config">
  <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="4 Content - ApprovedForPatient"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetAlertInformationResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:healthcond:description:GetAlertInformation:2:rivtabp21}GetAlertInformationResponderBinding" soapVersion="1_1" anonymous="optional" definition="../../schemas/interactions/GetAlertInformationInteraction/GetAlertInformationInteraction_2.0_RIVTABP21.wsdl" id="78a918cb-697f-4ba4-9552-8d3a61e6424f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart="file:/C:/Users/bpettersson/bitbucket/riv.clinicalprocess.healthcond.description/schemas/interactions/GetAlertInformationInteraction/GetAlertInformationInteraction_2.0_RIVTABP21.wsdl">
      <con:part>
        <con:url>file:/C:/Users/bpettersson/bitbucket/riv.clinicalprocess.healthcond.description/schemas/interactions/GetAlertInformationInteraction/GetAlertInformationInteraction_2.0_RIVTABP21.wsdl</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetAlertInformationInteraction" targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetAlertInformation:2:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:tjsi="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationInitiator:2" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetAlertInformation:2:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetAlertInformationInteraction
			 Beskrivning: 
			   Request alert information for a subject of care
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:healthcond:description
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetAlertInformation:2:rivtabp21">
      <xs:import schemaLocation="GetAlertInformationResponder_2.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetAlertInformationRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation>National: The HSA-id of Inera AB ("national" aggregation service)
			Regional: The HSA-id of Inera AB (regional aggregation service)
			Specific Source system: The HSA-id of the source system</wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetAlertInformation"/>
  </wsdl:message>
  <wsdl:message name="GetAlertInformationResponse">
    <wsdl:part name="parameters" element="tjsr:GetAlertInformationResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetAlertInformationResponderInterface">
    <wsdl:operation name="GetAlertInformation">
      <wsdl:input message="tns:GetAlertInformationRequest"/>
      <wsdl:output message="tns:GetAlertInformationResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetAlertInformationResponderBinding" type="tns:GetAlertInformationResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetAlertInformation">
      <soap:operation soapAction="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2:GetAlertInformation" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetAlertInformationRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetAlertInformationResponderService">
    <wsdl:port name="GetAlertInformationResponderPort" binding="tns:GetAlertInformationResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
      <con:part>
        <con:url>file:\C:\Users\bpettersson\bitbucket\riv.clinicalprocess.healthcond.description\schemas\interactions\GetAlertInformationInteraction\GetAlertInformationResponder_2.0.xsd</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:core="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:2"/>
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:element name="GetAlertInformation" type="tns:GetAlertInformationType"/>
  <xs:element name="GetAlertInformationResponse" type="tns:GetAlertInformationResponseType"/>
  <xs:complexType name="GetAlertInformationType">
    <xs:sequence>
      <xs:element name="careUnitHSAId" type="core:HSAIdType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="patientId" type="core:PersonIdType"/>
      <xs:element name="timePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAId" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetAlertInformationResponseType">
    <xs:annotation>
      <xs:documentation>GetAlertInformation returnerar information om en patient som är av särskild vikt för hälso- och sjukvårdspersonal att veta, exempelvis överkänslighet mot läkemedel, allvarlig sjukdom eller vårdbegränsning. Informationsspecifikationen baseras på NPÖ RIV 2.2.0.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="alertInformation" type="core:AlertInformationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element minOccurs="0" name="result" type="core:ResultType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
      <con:part>
        <con:url>file:\C:\Users\bpettersson\bitbucket\riv.clinicalprocess.healthcond.description\schemas\core_components\clinicalprocess_healthcond_description_2.1.xsd</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="./clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:complexType name="CareDocumentationType">
    <xs:sequence>
      <xs:element name="careDocumentationHeader" type="tns:CPatientSummaryHeaderType"/>
      <xs:element name="careDocumentationBody" type="tns:CareDocumentationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareDocumentationBodyType">
    <xs:sequence>
      <xs:element name="clinicalDocumentNote" type="tns:ClinicalDocumentNoteType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentType">
    <xs:sequence>
      <xs:element name="functionalStatusAssessmentHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="functionalStatusAssessmentBody" type="tns:FunctionalStatusAssessmentBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentBodyType">
    <xs:sequence>
      <xs:element name="assessmentCategory" type="codes:AssessmentCategoryEnum"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="padl" type="tns:PADLType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="disability" type="tns:DisabilityType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--@TODO better names for clinicalDocumentNoteCode-->
  <xs:complexType name="ClinicalDocumentNoteType">
    <xs:sequence>
      <xs:element name="clinicalDocumentNoteCode" type="codes:ClinicalDocumentNoteCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentTypeCode" type="codes:ClinicalDocumentTypeCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentNoteTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="clinicalDocumentNoteText" type="xs:string" maxOccurs="1" minOccurs="0"/>
      <xs:element name="multimediaEntry" type="tns:MultimediaType" minOccurs="0" maxOccurs="1"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="dissentintOpinion" type="tns:DissentingOpinionType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAId" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Only used here to keep backwards compatibility with GetCareDocumentation 2.0, must be removed in favour
        of PatientSummaryHeaderType above when we go for the next major version-->
  <xs:complexType name="CPatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAid" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HealthcareProfessionalType">
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="healthcareProfessionalHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalName" type="xs:string" minOccurs="0"/>
      <xs:element name="healthcareProfessionalRoleCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="healthcareProfessionalCareGiverHSAId" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrgUnitType">
    <xs:sequence>
      <xs:element name="orgUnitHSAId" type="tns:HSAIdType" minOccurs="1"/>
      <xs:element name="orgUnitName" type="xs:string" minOccurs="1"/>
      <xs:element name="orgUnitTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitLocation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisType">
    <xs:sequence>
      <xs:element name="diagnosisHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="diagnosisBody" type="tns:DiagnosisBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisBodyType">
    <xs:sequence>
      <xs:element name="typeOfDiagnosis" type="codes:DiagnosisTypeEnum"/>
      <xs:element minOccurs="0" name="chronicDiagnosis" type="xs:boolean"/>
      <xs:element name="diagnosisTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="diagnosisCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="relatedDiagnosis" type="tns:RelatedDiagnosisType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationType">
    <xs:sequence>
      <xs:element name="alertInformationHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="alertInformationBody" type="tns:AlertInformationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedDiagnosisType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationBodyType">
    <xs:sequence>
      <xs:element name="typeOfAlertInformation" type="tns:CVType"/>
      <xs:element name="ascertainedDate" type="tns:DateType" minOccurs="0"/>
      <xs:element name="verifiedTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="validityTimePeriod" type="tns:TimePeriodType"/>
      <xs:element name="alertInformationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="obsoleteTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="obsoleteComment" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivity" type="tns:HyperSensitivityType" minOccurs="0"/>
      <xs:element name="seriousDisease" type="tns:SeriousDiseaseType" minOccurs="0"/>
      <xs:element name="treatment" type="tns:TreatmentType" minOccurs="0"/>
      <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType" minOccurs="0"/>
      <xs:element name="restrictionOfCare" minOccurs="0" type="tns:RestrictionOfCareType"/>
      <xs:element name="unstructuredAlertInformation" minOccurs="0" type="tns:UnstructuredAlertInformationType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="relatedAlertInformation" type="tns:RelatedAlertInformationType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HyperSensitivityType">
    <xs:sequence>
      <xs:element name="typeOfHypersensitivity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfSeverity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfCertainty" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalHypersensitivity" type="tns:PharmaceuticalHypersensitivityType" minOccurs="0"/>
      <xs:element name="otherHypersensitivity" type="tns:OtherHypersensitivityType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PharmaceuticalHypersensitivityType">
    <xs:sequence>
      <xs:element name="atcSubstance" type="tns:CVType" minOccurs="0"/>
      <xs:element name="nonATCSubstance" type="xs:string" minOccurs="0"/>
      <xs:element name="nonATCSubstanceComment" type="xs:string" minOccurs="0"/>
      <xs:element name="pharmaceuticalProductId" type="tns:CVType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OtherHypersensitivityType">
    <xs:sequence>
      <xs:element name="hypersensitivityAgent" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivityAgentCode" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SeriousDiseaseType">
    <xs:sequence>
      <xs:element name="disease" type="tns:CVType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TreatmentType">
    <xs:sequence>
      <xs:element name="treatmentDescription" type="xs:string"/>
      <xs:element name="treatmentCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalTreatment" type="tns:CVType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CommunicableDiseaseType">
    <xs:sequence>
      <xs:element name="communicableDiseaseCode" type="tns:CVType"/>
      <xs:element name="routeOfTransmission" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RestrictionOfCareType">
    <xs:sequence>
      <xs:element name="restrictionOfCareComment" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="UnstructuredAlertInformationType">
    <xs:sequence>
      <xs:element name="unstructuredAlertInformationHeading" type="xs:string"/>
      <xs:element name="unstructuredAlertInformationContent" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedAlertInformationType">
    <xs:sequence>
      <xs:element name="typeOfAlertInformationRelationship" type="tns:CVType"/>
      <xs:element name="relationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="documentId" type="xs:string" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PADLType">
    <xs:sequence>
      <xs:element name="typeOfAssessment" type="tns:CVType"/>
      <xs:element name="assessment" type="xs:string" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DisabilityType">
    <xs:sequence>
      <xs:element name="disabilityAssessment" type="tns:CVType"/>
      <xs:element name="comment" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Below: only helper types allowed.
        
        A helper type is a type used in one ore more of the domain schema common types.
        It can also be a type used in two or more service schemas.-->
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall med hjälp av start-
                och slutdatum. start: Startdatum på formatet ÅÅÅÅMMDD end: Slutdatum på formatet
                ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType"/>
      <xs:element name="end" type="tns:DateType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--YYYYMMDD-->
  <xs:simpleType name="DateType">
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall med hjälp av start-
                och slutdatum. start: Startdatum på formatet YYYYMMDDhhmmss end: Slutdatum på
                formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="end" type="tns:TimeStampType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time. A point in
                time is most often represented as a calendar expression. The time has the format
                YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CVType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystem" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemName" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemVersion" type="xs:string" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="originalText" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="legalAuthenticatorName" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DissentingOpinionType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="opinionId" type="tns:IIType" minOccurs="0"/>
      <xs:element name="authorTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="opinion" type="xs:string"/>
      <xs:element name="personId" type="tns:PersonIdType"/>
      <xs:element name="personName" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PQType">
    <xs:sequence>
      <xs:element name="value" type="xs:double"/>
      <xs:element name="unit" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IIType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="root" type="xs:string"/>
      <xs:element name="extension" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonIdType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType"/>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
      <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
      <xs:element name="logId" type="xs:string"/>
      <xs:element minOccurs="0" name="subCode" type="xs:string"/>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
      <con:part>
        <con:url>file:\C:\Users\bpettersson\bitbucket\riv.clinicalprocess.healthcond.description\schemas\core_components\clinicalprocess_healthcond_description_enum_2.1.xsd</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:enums:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:simpleType name="ClinicalDocumentNoteCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk Anteckningstyp (1.2.752.129.2.2.2.11):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="utr">
        <xs:annotation>
          <xs:documentation>Utredning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="atb">
        <xs:annotation>
          <xs:documentation>Åtgärd/Behandling</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sam">
        <xs:annotation>
          <xs:documentation>Sammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sao">
        <xs:annotation>
          <xs:documentation>Samordning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ins">
        <xs:annotation>
          <xs:documentation>Inskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="slu">
        <xs:annotation>
          <xs:documentation>Slutanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="auf">
        <xs:annotation>
          <xs:documentation>Anteckning utan fysiskt möte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sva">
        <xs:annotation>
          <xs:documentation>Slutenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="bes">
        <xs:annotation>
          <xs:documentation>Besöksanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
      <xs:enumeration value="model/vrml"/>
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ClinicalDocumentTypeCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk (?.?.?.?.?.?):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="epi">
        <xs:annotation>
          <xs:documentation>Epikris</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="int">
        <xs:annotation>
          <xs:documentation>Intagninganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="dag">
        <xs:annotation>
          <xs:documentation>Daganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ova">
        <xs:annotation>
          <xs:documentation>Öppenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovs">
        <xs:annotation>
          <xs:documentation>Öppenvårdssammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovr">
        <xs:annotation>
          <xs:documentation>Övrigt dokument</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AssessmentCategoryEnum">
    <xs:annotation>
      <xs:documentation>Bedömningskategori.
                Beskriver vilken kategori av bedömning som är gjord. Tillåtna värden är "pad-pad" (för PADL-bedömning) och "fun-fun" (för funktionsnedsättningsbedömningar).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="pad-pad">
        <xs:annotation>
          <xs:documentation>PADL-bedömning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="fun-fun">
        <xs:annotation>
          <xs:documentation>funktionsnedsättningsbedömningar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DiagnosisTypeEnum">
    <xs:annotation>
      <xs:documentation>Anges som "Huvuddiagnos", "Bidiagnos".</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Huvuddiagnos">
        <xs:annotation>
          <xs:documentation>Huvuddiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Bidiagnos">
        <xs:annotation>
          <xs:documentation>Bidiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
      <xs:enumeration value="INFO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ErrorCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INVALID_REQUEST"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
      <con:part>
        <con:url>file:\C:\Users\bpettersson\bitbucket\riv.clinicalprocess.healthcond.description\schemas\core_components\itintegration_registry_1.0.xsd</con:url>
        <con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>${webServiceUrl}</con:endpoint>
      <con:endpoint>http://tempuri.org</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2:GetAlertInformation" name="GetAlertInformation" bindingOperationName="GetAlertInformation" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="59d85af4-32cd-4d89-870b-6efb3468b2fc">
      <con:settings/>
      <con:call name="Request 1" id="84d60a2b-11c0-4fbd-9702-0f283ecf9d72">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${webServiceUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:urn="urn:riv:itintegration:registry:1"
xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2"
xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAId>?</urn1:sourceSystemHSAId>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2:GetAlertInformation"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:testSuite name="1 Basic tests" id="87c7fa88-8003-4e8b-ad2f-89484f3cc8f4">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.1.1 Personnummer" searchProperties="true" id="306ca79c-595c-4bdc-9cbb-b3479fbd51a9" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="6f3ba4ac-427a-4b1d-a28d-1f3af069fa02">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="1714ec9e-0fa7-4b60-8900-7ec271c0f4f2">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="50fd94e3-6ae2-4241-8124-344ee1959216">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="09b348ab-198b-4947-bbc5-a8b16b963d5f"/>
            <con:assertion type="SOAP Fault Assertion" id="c121533e-fb45-4742-b87d-8d08c4f31735"/>
            <con:assertion type="Schema Compliance" id="b1cfc53f-f43d-4388-bff4-871c688e0252">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="27e50b76-a43b-4c78-af59-23cdf7b37bdf">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="313fd7c6-6531-4176-89d8-bc742f2354ad">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>6f3ba4ac-427a-4b1d-a28d-1f3af069fa02</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1714ec9e-0fa7-4b60-8900-7ec271c0f4f2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.1.2 Samordningsnummer" searchProperties="true" id="7e8eb0d2-0fe4-4f00-a929-85b1323c4dd1" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="9d7ec56d-38a2-4656-826d-d3339edc38ad">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="81fc22ae-226d-49e7-bdb6-582ba330d1d5">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="50fd94e3-6ae2-4241-8124-344ee1959216">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="09b348ab-198b-4947-bbc5-a8b16b963d5f"/>
            <con:assertion type="SOAP Fault Assertion" id="c121533e-fb45-4742-b87d-8d08c4f31735"/>
            <con:assertion type="Schema Compliance" id="b1cfc53f-f43d-4388-bff4-871c688e0252">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="27e50b76-a43b-4c78-af59-23cdf7b37bdf">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="313fd7c6-6531-4176-89d8-bc742f2354ad">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>6f3ba4ac-427a-4b1d-a28d-1f3af069fa02</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1714ec9e-0fa7-4b60-8900-7ec271c0f4f2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.1.3 Lokalt reservnummer" searchProperties="true" id="da608161-f1a7-47eb-b289-e4dab086f8ea" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="410fea92-e763-4aab-9f26-d228c5e38e0e">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="02b3dbb2-09cf-4036-a495-4b19ae008c60">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="50fd94e3-6ae2-4241-8124-344ee1959216">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="09b348ab-198b-4947-bbc5-a8b16b963d5f"/>
            <con:assertion type="SOAP Fault Assertion" id="c121533e-fb45-4742-b87d-8d08c4f31735"/>
            <con:assertion type="Schema Compliance" id="b1cfc53f-f43d-4388-bff4-871c688e0252">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="27e50b76-a43b-4c78-af59-23cdf7b37bdf">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="313fd7c6-6531-4176-89d8-bc742f2354ad">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>6f3ba4ac-427a-4b1d-a28d-1f3af069fa02</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1714ec9e-0fa7-4b60-8900-7ec271c0f4f2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    
    <con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="1.2.1 TimePeriod giltighetsdatum" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bcac014f-9de7-48e8-8c45-9d9c6752fd32">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="d31d044a-8b1f-4fb6-ae43-d545b0254f58">
        <con:settings/>
        <con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def callerName = testRunner.testCase.getName()
log.info("Namn = " + callerName)
if (testRunner.testCase.getPropertyValue("callerName") != null)
{
	//Anrop från annat testfall
	callerName = testRunner.testCase.getPropertyValue("callerName")
	log.info("Externt anrop från " + callerName)
}
def source = new XmlDataReader(context, dataFile)

source.load(callerName)
log.info("PatientId = " + context.patientId)
testRunner.testCase.setPropertyValue("callerName", null)</script></con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation no filter" id="f1b54fb4-aec7-4184-8518-9b56df42f79c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation no filter" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="obsoleteTime"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="4e08eeca-5475-4d77-8df1-663b242dbd1a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Get all records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

context.allRecords = ca.getContentRecords()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Calculate interval" id="5496d9f3-bcf3-4e98-ab40-0209c5db3dc0">
        <con:settings/>
        <con:config>
          <script>def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'

if (!context.allRecords) {
	testRunner.fail("No records")
	return
}
if (!context.dates) {
	def startTimes = context.allRecords.collect { record -> record.firstElementAt(start) }
	def endTimes = context.allRecords.collect { record -> record.firstElementAt(end) }
	def obsoleteTimes = context.allRecords.collect { record -> record.firstElementAt(obsoleteTime) }
	context.dates = (startTimes+endTimes+obsoleteTimes).findAll().collect { it[0..7] }.unique()
	if (!context.dates) {
		testRunner.fail("No data")
	}
}

context.timePeriodStart = context.dates.pop()
context.timePeriodEnd = context.timePeriodStart

[context.timePeriodStart, context.timePeriodEnd]</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation timePeriod" id="c72d8369-b68d-41dc-8cc5-ac7c8f6930fa">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation timePeriod" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="obsoleteTime"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="4e08eeca-5475-4d77-8df1-663b242dbd1a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert expected records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def id = '/urn:alertInformation/urn1:alertInformationHeader/urn1:documentId'

def condition = { record ->
	def before = [end, obsoleteTime].any { xPath ->
		record.timestampIsBefore(xPath, context.timePeriodStart)
	}
	def after = record.timestampIsAfter(start, context.timePeriodEnd)
	return !before &amp;&amp; !after
}

def recordInfo = { record ->
	sprintf("DocumentId %s (start:%s end:%s obsoleteTime:%s)", [id, start, end, obsoleteTime].collect{record.firstElementAt(it)})
}

ca.assertFilteredResponse(context.allRecords, condition, recordInfo)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Evaluate" id="21761742-ecf9-4908-b236-bc69c8227567">
        <con:settings/>
        <con:config>
          <script>if (context.dates.any()) {
	testRunner.gotoStepByName( "Calculate interval")
}
else if (testRunner.getResults().any{it.getStatus().toString() == 'FAILED'}) {
	testRunner.fail("One or more steps failed")
}</script>
        </con:config>
      </con:testStep>
      <con:properties><con:property><con:name>callerName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="1.2.2 TimePeriod intervall" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="27d170af-4a4e-4c6d-8711-c61256bcc7d5">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="e8b2ae8a-e73e-49b6-a9bc-9029b3c8437a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation no filter" id="d5bf1fa1-a275-4abf-b46e-2aab07079794">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation no filter" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="obsoleteTime"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="4e08eeca-5475-4d77-8df1-663b242dbd1a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Get all records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

context.allRecords = ca.getContentRecords()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Calculate interval" id="253c7bb8-616f-4615-aacd-22a8d025b7c2">
        <con:settings/>
        <con:config>
          <script>def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def dateFormat = 'yyyyMMdd'

if (!context.allRecords) {
	testRunner.fail("No records")
	return
}
if (!context.dates) {
	def startTimes = context.allRecords.collect { record -> record.firstElementAt(start) }
	def endTimes = context.allRecords.collect { record -> record.firstElementAt(end) }
	def obsoleteTimes = context.allRecords.collect { record -> record.firstElementAt(obsoleteTime) }
	def dates = (startTimes+endTimes+obsoleteTimes).findAll().collect { it[0..7] }.unique()
	
	def firstDate = Date.parse(dateFormat, dates.min())
	def lastDate = Date.parse(dateFormat, dates.max())
	def dateDiff = lastDate - firstDate
	context.dates =  []
	(2 * context.numberOfIntervals.toInteger()).times {
		def randomOffset = (Math.random() * (dateDiff+1)).toInteger()
		def randomDate = firstDate.plus(randomOffset).format(dateFormat)
		context.dates.add(randomDate)
	}
}

def dates = [context.dates.pop(), context.dates.pop()].sort()

context.timePeriodStart = dates[0]
context.timePeriodEnd = dates[-1]

[context.timePeriodStart, context.timePeriodEnd]</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation timePeriod" id="bfbb60ce-6a63-4eeb-b363-2609c432a573">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation timePeriod" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="obsoleteTime"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="4e08eeca-5475-4d77-8df1-663b242dbd1a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert expected records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def id = '/urn:alertInformation/urn1:alertInformationHeader/urn1:documentId'

def condition = { record ->
	def before = [end, obsoleteTime].any { xPath ->
		record.timestampIsBefore(xPath, context.timePeriodStart)
	}
	def after = record.timestampIsAfter(start, context.timePeriodEnd)
	return !before &amp;&amp; !after
}

def recordInfo = { record ->
	sprintf("DocumentId %s (start:%s end:%s obsoleteTime:%s)", [id, start, end, obsoleteTime].collect{record.firstElementAt(it)})
}

ca.assertFilteredResponse(context.allRecords, condition, recordInfo)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Evaluate" id="f9449c39-a625-48e8-85cd-003e99711b8a">
        <con:settings/>
        <con:config>
          <script>if (context.dates.any()) {
	testRunner.gotoStepByName( "Calculate interval")
}
else if (testRunner.getResults().any{it.getStatus().toString() == 'FAILED'}) {
	testRunner.fail("One or more steps failed")
}</script>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.2.3 TimePeriod tomt svar" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a0c6b22f-0416-42e2-aeb9-6f78efd56303">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="63cd9563-ee72-4b46-aeda-bbee67fce2d9">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation no filter" id="a981dece-c397-4cca-9fd8-fd2ac1a725a6">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation no filter" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="start_before"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="4e08eeca-5475-4d77-8df1-663b242dbd1a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Get all records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

context.allRecords = ca.getContentRecords()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Calculate interval" id="a8222b06-2274-4581-bc4f-e7a0eca1e6d3">
        <con:settings/>
        <con:config>
          <script>def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def dateFormat = 'yyyyMMdd'

if (!context.allRecords) {
	testRunner.fail("No records")
	return
}
def startTimes = context.allRecords.collect { record -> record.firstElementAt(start) }
def endTimes = context.allRecords.collect { record -> record.firstElementAt(end) }
def obsoleteTimes = context.allRecords.collect { record -> record.firstElementAt(obsoleteTime) }
def dates = (startTimes+endTimes+obsoleteTimes).findAll().collect { it[0..7] }.unique()
	
context.timePeriodStart = Date.parse(dateFormat, dates.min()).minus(15).format(dateFormat)
context.timePeriodEnd = Date.parse(dateFormat, dates.min()).minus(1).format(dateFormat)

[context.timePeriodStart, context.timePeriodEnd]</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation timePeriod" id="e128efac-eb4b-40a2-9b58-6ed63ac465b4">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation timePeriod" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            
            <con:assertion type="GroovyScriptAssertion" name="Assert no records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.2.4 TimePeriod manuell" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ccf8c3c4-0221-4de7-9671-e54a2dd46eb2">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="496a22d6-a954-4238-bb73-8818335c1a2d">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation no filter" id="83e867a7-f773-44c1-81ee-96f6fbb4351c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation no filter" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="start_before"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="4e08eeca-5475-4d77-8df1-663b242dbd1a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Get all records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

context.allRecords = ca.getContentRecords()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation timePeriod" id="fd551598-eb13-4a63-9159-fbe11e5557dd">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation timePeriod" id="f1ccc1c9-bada-4a23-a3d8-89826f3351ab">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="start_before"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3eb841a9-58bb-4707-b980-d4626339028a"/>
            <con:assertion type="Schema Compliance" id="4b7dab4b-ffd9-4077-8368-38f2702dd646">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Fault Assertion" id="561b4630-5856-4406-86a4-714d14edcd5a"/>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="4e08eeca-5475-4d77-8df1-663b242dbd1a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert expected records" id="34378aaa-5a77-4e7b-8157-bb067fb9cedb">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def id = '/urn:alertInformation/urn1:alertInformationHeader/urn1:documentId'

def condition = { record ->
	def before = [end, obsoleteTime].any { xPath ->
		record.timestampIsBefore(xPath, context.timePeriodStart)
	}
	def after = record.timestampIsAfter(start, context.timePeriodEnd)
	return !before &amp;&amp; !after
}

def recordInfo = { record ->
	sprintf("DocumentId %s (start:%s end:%s obsoleteTime:%s)", [id, start, end, obsoleteTime].collect{record.firstElementAt(it)})
}

ca.assertFilteredResponse(context.allRecords, condition, recordInfo)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.3 CareUnit" searchProperties="true" id="6ad875ee-dbe9-4c04-8947-3fbf65622d72" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="cf55ca29-b3c5-4325-9113-ea94a5d31d7e">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="c4e3be4b-9e3d-4ab7-b06c-3ef556e173d2">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="3a00e897-1b54-43c6-844c-c4ca4c690adc">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:careUnitHSAId>${careUnitId1}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3fe530e0-ccc3-4fa1-b528-807eb020545b"/>
            <con:assertion type="SOAP Fault Assertion" id="5d93919b-6fd9-454f-813e-96254c5f271d"/>
            <con:assertion type="Schema Compliance" id="ba8e3abe-32bf-4d17-a767-32df00bc7773">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="16c4b615-9c16-4622-bf7d-d9a17b988830">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="559c3786-da64-492d-813a-9df0b978fdd7">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert CareUnitId" id="80257ee0-012e-4f66-953c-11a6953a8803">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId', context.careUnitId1)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.4 SourceSystem" searchProperties="true" id="5d454885-aca4-4e31-96e5-3713d5cf42d4" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="6e7f6d2d-38ce-46a1-9b62-949431f6bd1e">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="8be92507-543f-4fe5-bf5e-ae558ca3d9a0">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="3a00e897-1b54-43c6-844c-c4ca4c690adc">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="source_system"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="3fe530e0-ccc3-4fa1-b528-807eb020545b"/>
            <con:assertion type="SOAP Fault Assertion" id="5d93919b-6fd9-454f-813e-96254c5f271d"/>
            <con:assertion type="Schema Compliance" id="ba8e3abe-32bf-4d17-a767-32df00bc7773">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="16c4b615-9c16-4622-bf7d-d9a17b988830">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="559c3786-da64-492d-813a-9df0b978fdd7">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert SourceSystem" id="80257ee0-012e-4f66-953c-11a6953a8803">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:sourceSystemHSAId', context.sourceSystemHSAId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.5 CareContact" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9eae2777-592f-496d-8a41-0e8a1f0058d3">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="23814d06-fe9c-4459-a5a0-ef5aa9b50d87">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="756430a1-b68a-4e12-91cf-de33344bf6db">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="e1269dc9-51e0-4d75-ad23-34b7f1da6501">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1b880be2-1a5f-408f-ad4d-d6f1288554ba"/>
            <con:assertion type="SOAP Fault Assertion" id="8f699353-c173-4874-8386-bd24ccd1985b"/>
            <con:assertion type="Schema Compliance" id="626a96dc-9483-4f74-87d7-cb09620c1e6c">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="2c98a328-6603-4ac6-a56b-da129de1339c">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert CareContactId" id="632bfeeb-29d1-4380-b144-cbab36a0d0e7">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:careContactId', context.careContactId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.7 SoapFault" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2e79e896-e77f-449a-97a7-e5e49375001c">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="fe44c541-03bb-4ade-8a75-02b656e9f408">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="3789024e-4075-4955-bda6-cb6a41e9e015">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="d9dc460a-f9ed-4fa5-96a5-90e562901318">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SoapFault"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="085595e5-3b72-49bc-8a07-27f51183f81d"/>
            <con:assertion type="Not SOAP Fault Assertion" id="b8fea079-122a-40ff-9bb0-798529ac6380" name="SOAP Fault"/>
            <con:assertion type="GroovyScriptAssertion" id="0849e695-e9fe-4ff3-af8b-c2902e295643" name="Log Request Response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContextHelperTK
new ContextHelperTK(context, messageExchange, log).logTestData()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.8 NonExisting PatientId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="22bd817f-ca01-4dac-b6b2-f060c7295480">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="e6af3554-f91d-4dd3-b814-3417eaf44452">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="e23ab861-5edb-423d-88b3-80c13efc45a3">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="c4ef93ad-7bdd-4c3d-a280-1043cc8e7f35">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0d2c74cc-2daa-49c8-a0df-13015b2b7b5e"/>
            <con:assertion type="SOAP Fault Assertion" id="a8948b13-3d42-4739-97e8-efd97ba6e6bf"/>
            <con:assertion type="GroovyScriptAssertion" id="12359b11-b255-42dd-8da2-37fc90d143e8" name="Assert empty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.9 NonExisting CareContactId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1a51de69-b608-4686-ae88-78c8948b4d41">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="b95c4319-8604-47db-8cf7-8f8a2a90a7e3">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="385a7ce8-77a4-40ba-b3cc-6ab553f38ca4">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="0da9555f-14ad-4c96-b76a-85762de730bd">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="053c7a85-a312-41f9-b8d7-feb644bebcab"/>
            <con:assertion type="SOAP Fault Assertion" id="99a62697-97bb-40ac-ae80-45b8f6773806"/>
            <con:assertion type="GroovyScriptAssertion" id="ff630e62-c535-4ef8-a5e9-0d07c06008fc" name="Assert empty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="b9a21595-67c4-41a8-b95d-c7b4861c3edc" name="2 Content - Common">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="fcc022b0-e640-4a61-aef3-05a149d1d6cb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.1 Encoding_HeaderProlog" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="8429f28c-31bf-4dba-b5e0-7120b71e9838">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="5963da5c-896a-41f5-8644-81b1e838e76c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="bb3525d5-381c-4d55-8713-a1874c25f46a">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="56f11fde-e233-437e-8137-bd68e2dd6fa7"/>
            <con:assertion type="SOAP Fault Assertion" id="32356b4a-693e-46e3-b5be-303bc67c6600"/>
            <con:assertion type="Schema Compliance" id="3866c938-eb4a-4958-9451-876e387d1535">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="dda77c00-6697-4ff6-bb33-476b8619a854" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="234e80b9-2c67-4082-adc0-ff3858df2172" name="Assert Content-Type">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange,log)
ca.assertValidEncoding()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="d2e44900-329a-4935-b147-30c7e372373d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.2 Encoding_SpecialCharacters" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="0ebf472a-b799-4962-88b0-847167689aef">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="a2698782-ce35-441b-b5b1-b34ab147d5a9">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="6b6fd3ce-9217-4a8b-84a7-c4f5a48237ba">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="02c5ab04-6c6d-40b6-809d-b4c8f9e776d6"/>
            <con:assertion type="SOAP Fault Assertion" id="bd7d043b-c8c1-49d6-aac1-af8bdb1eff3f"/>
            <con:assertion type="Schema Compliance" id="0190e719-6161-4dbe-8c98-3ff51785d225">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="b75b9c45-654e-4c11-903c-5baabde06bab" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            <con:assertion type="GroovyScriptAssertion" id="494b693f-5f53-4429-a0ca-053c317370da" name="Assert special characters"><con:configuration><scriptText><![CDATA[// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Call GetAlertInformation#Response" )

//Läs in respons och omvandla tecken
def xml = holder.getXml()
def unescapedXml = xml.replaceAll(/&amp;/, '&')
				.replaceAll(/&lt;/, '<')
         			.replaceAll(/&gt;/, '>')
         			.replaceAll(/&quot;/, '"')
         			.replaceAll(/&apos;/, "'")

//Läs in teststrängen och omvandla tecken
def testString = context.testString
def unescapedTestString = testString.replaceAll(/&amp;/, '&')
				.replaceAll(/&lt;/, '<')
         			.replaceAll(/&gt;/, '>')
         			.replaceAll(/&quot;/, '"')
         			.replaceAll(/&apos;/, "'")

assert unescapedXml.indexOf(unescapedTestString) > -1 : "Söksträngen " + unescapedTestString + " finns inte"]]></scriptText></con:configuration></con:assertion><con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="60e7b564-b4f1-48db-b26e-4a48b05d8298" name="3 Content - SJF">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="e5d57ba7-29c6-4f76-8711-fc23e9edc9d9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="3.1 VG_VE" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="f09df5db-ff26-4be6-b07b-2fd3bf7fec3a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="a8c14e3f-9537-4703-bd3a-f99b2745f68e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="0a0292dd-5a76-49da-9a25-0853c123c3ee">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="5b4de1f3-ff7f-4264-a5a7-fdf25d4afcaa"/>
            <con:assertion type="SOAP Fault Assertion" id="e4d7594d-203f-4dd0-997d-02639cc43d87"/>
            <con:assertion type="Schema Compliance" id="762b0659-4706-478d-8b73-68e9d8ac6509">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="776040ad-f8a3-44fe-a746-5e39a07e309f" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="86dea604-1f5d-49f7-b1d7-a8c127fc8bd2" name="Assert Caregiver present">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareGiverHSAId')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="d1555105-bb76-40b8-9bbd-dd798a1573c4" name="Assert Careunit present">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="daabaa74-b024-4909-9cb4-83f3f5947718" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="3.2 AuthorTime" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="dce72029-12fe-4770-b995-e44154427055">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="5693ce80-3395-43bb-a2df-7f507ed000ef">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="0a0292dd-5a76-49da-9a25-0853c123c3ee">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="5b4de1f3-ff7f-4264-a5a7-fdf25d4afcaa"/>
            <con:assertion type="SOAP Fault Assertion" id="e4d7594d-203f-4dd0-997d-02639cc43d87"/>
            <con:assertion type="Schema Compliance" id="762b0659-4706-478d-8b73-68e9d8ac6509">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="776040ad-f8a3-44fe-a746-5e39a07e309f" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="1b3d4208-552c-4d14-92c7-e6b12f783f07" name="Assert AuthorTime">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:accountableHealthcareProfessional/urn1:authorTime')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="8f6cf504-6881-4547-a6a1-762b2fa10c26" name="4 Content - ApprovedForPatient">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="d5c4747d-935a-44be-a11b-6292145d7a47" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="4.1 ApprovedForPatient_true" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="d22ef733-8f80-45a6-be1e-2f942329f281">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="c3e7dda4-6fb0-4431-99a0-a64d11cfca0c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Approved-true"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert approvedForPatient true">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:alertInformation/urn1:alertInformationHeader/urn1:approvedForPatient', 'true')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="7a345e01-548b-4c0a-accd-399d00382c49" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="4.2 ApprovedForPatient_false" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="7b98b1bd-e4d8-4102-ae44-5231f3ddcfaf">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="eac06016-6be3-4569-8783-6573e4f80bad">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="c521f2a4-9e27-49e9-8c10-28a8b3b7dc48">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Approved-false"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="d4a8090f-39b0-4aea-8c22-80cc4b5302ed"/>
            <con:assertion type="SOAP Fault Assertion" id="830b74de-fbef-4ef3-b550-e14e7e29d5df"/>
            <con:assertion type="Schema Compliance" id="f1a2f4c3-a6a1-46e4-bf3c-2a294723b491">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="e35f1e72-de82-4272-ad90-cc7235ff5d9e" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c427e37f-d876-4cb8-8ac3-c50ef5e26d36" name="Assert approvedForPatient false">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:alertInformation/urn1:alertInformationHeader/urn1:approvedForPatient', 'false')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="ef56dc8e-b43f-4360-91bd-f578dbd48e79" name="5 Content - ContractSpecific">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="31ea9c64-a26c-4c74-893f-08f3ae8ebadc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.1 signed" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="24afe7af-2620-44e5-831f-c632fb9b0ece">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="6149f2e0-9025-4ca6-8de8-96e2cf9c3d80">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Hypersensitivity"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:urn="urn:riv:itintegration:registry:1" 
xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" 
xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert signed">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def legalAuthenticator = '//urn:alertInformation/urn1:alertInformationHeader/urn1:legalAuthenticator'

ca.assertForAnyRecord(
{ record -> record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorHSAId').size() +
record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorName').size() > 0 }
, "Minst en post skall vara signerad.")</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="89452a8b-d81c-4d3c-bd4e-4fd6414ee134" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.2 unsigned" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="cfc6b0a6-0856-474a-81b6-a689aaac8eea">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="0b24bcbf-cf99-4112-bf48-b8e2451d0afc">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="LegalAuthenticator_0"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert unsigned">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExcludedInAnyRecord('/urn:alertInformation/urn1:alertInformationHeader/urn1:legalAuthenticator')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="1e47da3a-2e0e-421d-842f-21f0134fc212" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.3 locked" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="9629384d-d5be-4dfa-8d0f-24b4edc1f032">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="81ba57ec-cf4e-485e-81f1-214c03c9acb4">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="locked"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert locked">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def legalAuthenticator = '//urn:alertInformation/urn1:alertInformationHeader/urn1:legalAuthenticator'

ca.assertForAnyRecord(
{ record -> record.allElementsAt(legalAuthenticator).size() > 0 &amp;&amp; 
record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorHSAId').size() == 0 &amp;&amp; 
record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorName').size() == 0 }
, "Minst en post skall vara låst.")</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="6f87feb9-b95f-48a0-8e08-c20f445c8b71" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.4 Hypersensitivity" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="1242eab9-9c1f-4c3e-bde2-8f2a794f2595">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="cdb81583-33df-472b-ad81-807afde0eb67">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Hypersensitivity"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert hypersensitivity">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="8a596bf1-084a-40fa-a01d-523f586625cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.5 TypeOfHypersensitivity" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="5a070fa8-67cd-43e0-a7e3-2cbf93311b74">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="23ba7167-0718-4318-ae82-769fcffce636">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Hypersensitivity"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert typeOfHypersensitivity">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:typeOfHypersensitivity')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="d3e9a837-b5fd-4064-aceb-551ef9090840" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.6 DegreeOfSeverity_Livshotande" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="165449a4-4a20-4506-9b86-3696954934ea">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="d824f221-36a9-4bb4-924f-81b920e0680e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="severity_livshotande"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert degreeOfSeverity livshotande">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def xpathCode = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfSeverity/urn1:code'
def xpathOriginalText = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfSeverity/urn1:originalText'

ca.assertForAnyRecord({
	record -> 
	def code = record.firstElementAt(xpathCode)
	def text = record.firstElementAt(xpathOriginalText)
	return (code == '1' || text == 'Livshotande')
}, "Hittade ingen post med allvarlighetsgrad 'Livshotande'")

</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="2ee26b35-0f79-40b9-942a-9e12931f1aa0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.7 DegreeOfSeverity_Skadande" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="68507583-a2e9-49c8-ac9e-f1d5ea6b633a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="fd871940-aa65-4d3c-976f-e4a37cc84e5c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="severity_skadande"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert degreeOfSeverity skadande">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def xpathCode = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfSeverity/urn1:code'
def xpathOriginalText = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfSeverity/urn1:originalText'

ca.assertForAnyRecord({
	record -> 
	def code = record.firstElementAt(xpathCode)
	def text = record.firstElementAt(xpathOriginalText)
	return (code == '2' || text == 'Skadande' || text == 'Skadlig')
}, "Hittade ingen post med allvarlighetsgrad 'Skadande' eller 'Skadlig'")

</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="511d933c-8620-471a-af66-b94198842169" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.8 DegreeOfSeverity_Besvärande" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="cfff3679-981d-4232-921a-155d33e6a67c">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="505f2def-ca08-4608-99fe-172302f689c0">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="severity_besvarande"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert degreeOfSeverity besvärande">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def xpathCode = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfSeverity/urn1:code'
def xpathOriginalText = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfSeverity/urn1:originalText'

ca.assertForAnyRecord({
	record -> 
	def code = record.firstElementAt(xpathCode)
	def text = record.firstElementAt(xpathOriginalText)
	return (code == '3' || text == 'Besvärande')
}, "Hittade ingen post med allvarlighetsgrad 'Besvärande'")

</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="21af5854-7a6d-4a7d-9c4a-26163d757eac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.9 DegreeOfCertainty_Misstänkt" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="c230fbac-097f-4e4e-9f7d-3e22dcf41cd5">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="76faf4d8-3075-44ef-9743-e1b8161a115e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="certainty_misstankt"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert degreeOfCertainty misstänkt">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def xpathCode = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:code'
def xpathCodeSystem = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:codeSystem'
def xpathDisplayName = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:displayName'
def xpathOriginalText = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:originalText'

ca.assertForAnyRecord({
	record -> 
	def code = record.firstElementAt(xpathCode)
	def text = record.firstElementAt(xpathOriginalText)
	def codeSystem = record.firstElementAt(xpathCodeSystem)
	def displayName = record.firstElementAt(xpathDisplayName)
	return (code == 'm' &amp;&amp; 
		   codeSystem == '1.2.752.129.2.2.3.11' &amp;&amp; 
		   displayName == 'Misstänkt' || 
		   text == 'Misstänkt')
}, "Hittade ingen post med visshetsgrad 'Misstänkt'")
</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="b4aa93bc-e7ed-4f1a-a7be-a61c8d211456" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.10 DegreeOfCertainty_Trolig" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="54ad2d4c-d85c-4351-883d-ecadfd6aedfc">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="37e442fd-d2b3-439f-9156-9430cc6e8b52">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="certainty_trolig"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert degreeOfCertainty trolig">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def xpathCode = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:code'
def xpathCodeSystem = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:codeSystem'
def xpathDisplayName = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:displayName'
def xpathOriginalText = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:originalText'

ca.assertForAnyRecord({
	record -> 
	def code = record.firstElementAt(xpathCode)
	def text = record.firstElementAt(xpathOriginalText)
	def codeSystem = record.firstElementAt(xpathCodeSystem)
	def displayName = record.firstElementAt(xpathDisplayName)
	return (code == 't' &amp;&amp; 
		   codeSystem == '1.2.752.129.2.2.3.11' &amp;&amp; 
		   displayName == 'Trolig' || 
		   text == 'Trolig')
}, "Hittade ingen post med visshetsgrad 'Trolig'")

</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="868d910c-f722-484f-8796-b5cc3b3c5e0d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.11 DegreeOfCertainty_Konstaterad" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="6f3f8824-b28d-4ea0-8237-e5a4c81a19dd">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="912c8f38-67cc-4d21-aaac-a6ba0c3fc57e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="certainty_konstaterad"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert degreeOfCertainty konstaterad">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def xpathCode = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:code'
def xpathCodeSystem = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:codeSystem'
def xpathDisplayName = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:displayName'
def xpathOriginalText = '/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:degreeOfCertainty/urn1:originalText'

ca.assertForAnyRecord({
	record -> 
	def code = record.firstElementAt(xpathCode)
	def text = record.firstElementAt(xpathOriginalText)
	def codeSystem = record.firstElementAt(xpathCodeSystem)
	def displayName = record.firstElementAt(xpathDisplayName)
	return (code == 'k' &amp;&amp; 
		   codeSystem == '1.2.752.129.2.2.3.11' &amp;&amp; 
		   displayName == 'Konstaterad' || 
		   text == 'Konstaterad' || 
		   text == 'Verifierad')
}, "Hittade ingen post med visshetsgrad 'Konstaterad' eller 'Verifierad'")

</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="4b9c7629-052c-407b-8152-8d6c23afeccd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.12 ATCSubstance" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="54edde49-017d-482c-8e87-7f9a63a7204b">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="f7f14062-41e3-4f93-a13b-e2e48f75ef8d">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Hypersensitivity_AtcSubstance"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert atcSubstance">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:pharmaceuticalHypersensitivity/urn1:atcSubstance')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="9c20ddc7-d5c8-4231-bee6-f835ff26db5e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.13 NonATCSubstance" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="9fbe9e78-a25a-4cb5-9f51-26e861ef0b2a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="8059252e-a0b4-4385-ada9-b5be26244619">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Hypersensitivity"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert nonATCSubstance">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:pharmaceuticalHypersensitivity/urn1:nonATCSubstance')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="7d6477e5-b058-4c20-92c1-df3a59268a93" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.14 HypersensitivityAgent" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="8de5c6d8-98b6-42c8-87cb-563297936bad">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="9dbb2aad-91c1-4a7b-a29b-ecf6c27aa923">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Hypersensitivity"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert hypersensitivityAgent">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:otherHypersensitivity/urn1:hypersensitivityAgent')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="059447d7-b570-48e5-af62-914be97c845d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.15 SeriousDisease" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="a01a4165-a999-4c37-b4e2-04d50025c55f">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="2f4dd5a8-1e99-4d9a-8944-f50dbcab0f0e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SeriousDisease"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert seriousDisease">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:seriousDisease')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="f5b9d388-a6e5-478c-8328-c955802b4ed4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.16 Treatment" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="1aa4a944-1aac-4f28-90bc-29b49e797dcb">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="d52b5b66-b305-45aa-b630-d9e1eaa7510b">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Treatment"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert treatment">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:treatment')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="6c512f2d-f59f-44ed-ae2a-ac66e2bcc7a7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.17 CommunicableDisease" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="cb3c6642-af8a-4096-8d5a-70dc59af08fc">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="6f6d98c3-998d-4d19-b706-7f2f75a84d20">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CommunicableDisease"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert communicableDisease">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:communicableDisease')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="6e25129c-4aa7-4d81-9828-c63c49ebe7b3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.18 RestrictionOfCare" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="f1634715-dd65-4295-ae78-dcd1515ecb8f">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="6fb5a3ed-ad6b-49d7-a1f5-80a7a707e87c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="RestrictionOfCare"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert restrictionOfCare">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:restrictionOfCare')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="696e56f0-4176-4594-a89c-3f36fc49ca3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.19 UnstructuredAlertInformation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="e4ba99d7-7b04-486a-b5ef-971b31c31ef2">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="adf22529-79a4-4d55-9aed-c0948268dd1a">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="UnstructuredAlertInformation"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert unstructuredAlertInformation">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:unstructuredAlertInformation')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="f73389f3-1bb2-4c0b-93db-0bbffdb18266" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.20 PharmaceuticalHyperSensitivity" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="f6758d0e-3342-417a-afe3-348efa6a5ec8">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="faaf9f34-1554-4d04-a7d4-9990fbbc4352">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Hypersensitivity"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert pharmaceuticalHyperSensitivity">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:pharmaceuticalHypersensitivity')</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase><con:testCase id="b552d9b3-14e1-47a3-97a1-d8acf6704f99" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.21 OtherHyperSensitivity" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="0e9a6d6c-51c3-4a43-aeb9-1b617ac3a79a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation" id="f0509296-f2cf-4b61-99ae-6f7aca8c568e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="fcd21675-9d09-4382-850f-4a102fe9ea12">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Hypersensitivity"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="64715c0a-9475-4e40-8af7-508ef08e10d7"/>
            <con:assertion type="SOAP Fault Assertion" id="c210ea60-a6c4-47a3-8e07-5a39256e2a11"/>
            <con:assertion type="Schema Compliance" id="dcb137c7-6b98-4ca4-8873-7bad75019fd2">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="22603864-b12e-4d8e-b3bd-75fa86d9325d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8ed34d4b-9673-4215-9a35-12088b21c845" name="Assert otherHyperSensitivity">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:alertInformation/urn1:alertInformationBody/urn1:hypersensitivity/urn1:otherHypersensitivity')</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase><con:properties/>
  </con:testSuite>
  <con:testSuite id="f0b354bf-de5e-4161-97c6-c6592ed04d9b" name="6 Non-functional tests">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="c0b73095-2482-43f5-b5a3-e0e1adcfcf21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="6.1 Loadtest" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" name="PatientId #1" id="2645e290-60e7-432b-b1aa-78f4a19da11b">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="PatientId #1" id="ea16f051-4b5e-4f6f-870e-11e3be21efe1">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId1}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="58768f03-15a0-4ca6-99f1-d92bda1f4837"/>
            <con:assertion type="Response SLA Assertion" id="909b6b4f-4a0b-498b-a5e3-48ce7b8043bc" name="Response SLA">
              <con:configuration>
                <SLA>30000</SLA>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Schema Compliance" id="5163ae2d-f139-4238-819a-072418d9d8f0">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="3805474a-e20e-4ba9-915b-1be82bfad6e6"/>
            <con:assertion type="GroovyScriptAssertion" id="4176b3e9-27f7-4abd-ad8e-48138c11893b" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9e1a7ce7-55f2-4e09-b11b-4916612395a2" name="Assert PatientId #1">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId1)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="2b7bc625-d178-4007-99da-42a5f6aa97ee" name="Assert RecordLength">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

if (context.allRecords1==null){
	context.allRecords1 = messageExchange.responseContent.size()
}
else {
	context.allRecords11=messageExchange.responseContent.size()
	assert context.allRecords1==context.allRecords11
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="PatientId #2" id="70024965-e132-470e-8aef-eda87915c40d">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="PatientId #2" id="ea16f051-4b5e-4f6f-870e-11e3be21efe1">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId2}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="58768f03-15a0-4ca6-99f1-d92bda1f4837"/>
            <con:assertion type="Response SLA Assertion" id="909b6b4f-4a0b-498b-a5e3-48ce7b8043bc" name="Response SLA">
              <con:configuration>
                <SLA>30000</SLA>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Schema Compliance" id="5163ae2d-f139-4238-819a-072418d9d8f0">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="3805474a-e20e-4ba9-915b-1be82bfad6e6"/>
            <con:assertion type="GroovyScriptAssertion" id="4176b3e9-27f7-4abd-ad8e-48138c11893b" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9e1a7ce7-55f2-4e09-b11b-4916612395a2" name="Assert PatientId #2">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId2)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="3dad9021-d30b-457f-a129-e7afcaba1160" name="Assert RecordLength">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

if (context.allRecords2==null){
	context.allRecords2 = messageExchange.responseContent.size()
}
else {
	assert context.allRecords2==messageExchange.responseContent.size()
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:loadTest id="509301b2-92ce-4106-a706-2cd9a8ff7915" name="6.1.1 Grund">
        <con:settings/>
        <con:threadCount>10</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>180</con:testLimit>
        <con:limitType>TIME</con:limitType>
        <con:loadStrategy>
          <con:type>Simple</con:type>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:assertion type="Max Errors" name="Max Errors">
          <con:configuration>
            <name>Max Errors</name>
            <max-absolute-errors>0</max-absolute-errors>
            <max-relative-errors>0.2</max-relative-errors>
            <test-step>- Total -</test-step>
          </con:configuration>
        </con:assertion>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
      </con:loadTest>
      <con:loadTest id="10f2025d-b88d-44bc-a1c6-caf8d5c08286" name="6.1.2 Uthållighet">
        <con:settings/>
        <con:threadCount>5</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>1800</con:testLimit>
        <con:limitType>TIME</con:limitType>
        <con:loadStrategy>
          <con:type>Variance</con:type>
          <con:config>
            <interval>60000</interval>
            <variance>1.0</variance>
          </con:config>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:assertion type="Max Errors" name="Max Errors">
          <con:configuration>
            <name>Max Errors</name>
            <max-absolute-errors>0</max-absolute-errors>
            <max-relative-errors>0.2</max-relative-errors>
            <test-step>- Total -</test-step>
          </con:configuration>
        </con:assertion>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
      </con:loadTest>
      <con:setupScript>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testCase.getName())</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="ae62b8bc-adc3-45f3-b690-d575a44b0d71" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="6.2 Recovery" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" name="PatientId #1" id="328818fd-c14e-4ab6-a79f-3f9daec6226b">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="PatientId #1" id="ea16f051-4b5e-4f6f-870e-11e3be21efe1">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId1}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="58768f03-15a0-4ca6-99f1-d92bda1f4837"/>
            <con:assertion type="Schema Compliance" id="5163ae2d-f139-4238-819a-072418d9d8f0">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="3805474a-e20e-4ba9-915b-1be82bfad6e6"/>
            <con:assertion type="GroovyScriptAssertion" id="4176b3e9-27f7-4abd-ad8e-48138c11893b" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9e1a7ce7-55f2-4e09-b11b-4916612395a2" name="Assert PatientId #1">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId1)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="PatientId #2" id="13744c1a-4234-4771-807b-5c1613e644b3">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="PatientId #2" id="ea16f051-4b5e-4f6f-870e-11e3be21efe1">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId2}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="58768f03-15a0-4ca6-99f1-d92bda1f4837"/>
            <con:assertion type="Schema Compliance" id="5163ae2d-f139-4238-819a-072418d9d8f0">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="3805474a-e20e-4ba9-915b-1be82bfad6e6"/>
            <con:assertion type="GroovyScriptAssertion" id="4176b3e9-27f7-4abd-ad8e-48138c11893b" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9e1a7ce7-55f2-4e09-b11b-4916612395a2" name="Assert PatientId #2">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:alertInformation/urn1:alertInformationHeader/urn1:patientId/urn1:id', context.patientId2)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:loadTest id="702c2e2c-bff6-4f7c-8fb5-3f6a1a09594c" name="6.2.1 Återhämtning">
        <con:settings/>
        <con:threadCount>10</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>300</con:testLimit>
        <con:limitType>TIME</con:limitType>
        <con:loadStrategy>
          <con:type>Thread</con:type>
          <con:config>
            <startThreadCount>10</startThreadCount>
            <endThreadCount>100</endThreadCount>
          </con:config>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:assertion type="Max Errors" name="Max Errors">
          <con:configuration>
            <name>Max Errors</name>
            <max-absolute-errors>10</max-absolute-errors>
            <max-relative-errors>0.2</max-relative-errors>
            <test-step>- Total -</test-step>
          </con:configuration>
        </con:assertion>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
      </con:loadTest>
      <con:setupScript>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testCase.getName())</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="d64edaa5-8fdc-47d1-9ac9-5b2bbe4a4ca3" name="7 Consumer tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="7.1 CareUnit_Blacklisted" searchProperties="true" id="0de69206-f0ca-4091-af89-28d58ef6aa11">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="d529c39a-a504-4c02-8597-bdc0e6d7315c">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation 1" id="8a58c437-8580-4ee9-95d2-39c76f270795">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation 1" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="1c07f521-2353-43d1-ad37-4678d460ca12" name="Assert nonempty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Räkna antalet poster" id="4368cf1d-e04a-477d-8ef1-b296ef529b13">
        <con:settings/>
        <con:config>
          <script>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Call GetAlertInformation 1#Response" )
def path = testRunner.testCase.testSuite.project.getPropertyValue("RecordElementPath")
holder.declareNamespace("urn", "urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2")
holder.declareNamespace("urn1", "urn:riv:clinicalprocess:healthcond:description:2")

log.info path

def numberOfposts = holder["count(${path})"]
context.testCase.setPropertyValue("Poster request 1",numberOfposts)
log.info numberOfposts</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation 2" id="f15460ed-1bad-40bd-8056-1049d58aa28c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation 2" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Http-header filter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId2}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            <con:assertion type="GroovyScriptAssertion" id="19dc22f4-6511-4098-a173-7c940025da8d" name="Assert Antal filtrerade poster">
              <con:configuration>
                <scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Call GetAlertInformation 2#Response" )
def path = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("RecordElementPath")
holder.declareNamespace("urn", "urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2")
holder.declareNamespace("urn1", "urn:riv:clinicalprocess:healthcond:description:2")
log.info path

def numberOfposts = holder["count(${path})"]
context.testCase.setPropertyValue("Poster request 2",numberOfposts)

def AntalPosterRequest1 = context.testCase.getPropertyValue("Poster request 1")
def AntalPosterRequest2 = context.testCase.getPropertyValue("Poster request 2")
log.info "Post 1: " + AntalPosterRequest1
log.info "Post 2: " +  AntalPosterRequest2

assert AntalPosterRequest1 > AntalPosterRequest2 : "Antalet poster efter filtrering är inte färre än antalet poster före filtrering"</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple NotContains" id="770bce4f-fe2d-422b-8439-9be0b78b39db" name="Not Contains">
              <con:configuration>
                <token>${filterString}</token>
                <ignoreCase>true</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>myProperty</con:name>
          <con:value>numberOfLinksInParagraphs</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 1</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 2</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="7.2 Consumer_Blacklisted" searchProperties="true" id="e6bceee8-8882-412c-8a5a-8ba6745c9a99">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="16ce0790-8fb3-470d-8ec9-6815e5838778">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation 1" id="6a9b8938-de03-42b8-8277-a98738d80f66">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation 1" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="1c07f521-2353-43d1-ad37-4678d460ca12" name="Assert nonempty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      <con:testStep type="request" name="Call GetAlertInformation 2" id="76d7d740-5ca2-4a4b-a206-3f1aa90d6c91">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation 2" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId2}"/>
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            <con:assertion type="GroovyScriptAssertion" id="19dc22f4-6511-4098-a173-7c940025da8d" name="Assert empty response">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)
</scriptText></con:configuration>
            </con:assertion>
            
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>myProperty</con:name>
          <con:value>numberOfLinksInParagraphs</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 1</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 2</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="7.3 Consumer_Independent" searchProperties="true" id="59ef3df6-8c05-4372-bd17-c7c792f6935f">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="73bc9c11-b655-458e-a3f5-693c4719710f">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetAlertInformation 1" id="1340b08d-33e1-4f00-a74d-d3dc81c189d5">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation 1" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="1c07f521-2353-43d1-ad37-4678d460ca12" name="Assert nonempty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      <con:testStep type="request" name="Call GetAlertInformation 2" id="db6121d6-30fd-4f2e-b176-be42a10cff7c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation 2" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId2}"/>
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter2"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            
            
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="AssertSameResponse" id="3a1dc9cf-643c-4424-ab98-d5b22a74c353"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Hämta responser och nolla logId för att kunna jämföra svaren
def holder1 = groovyUtils.getXmlHolder( "Call GetAlertInformation 1#Response" )
def xml1 = new XmlSlurper().parseText(holder1.getXml())
xml1.Body.GetAlertInformationResponse.result.logId = 0

def holder2 = groovyUtils.getXmlHolder( "Call GetAlertInformation 2#Response" )
def xml2 = new XmlSlurper().parseText(holder2.getXml())
xml2.Body.GetAlertInformationResponse.result.logId = 0

assert xml1 == xml2 : "Konsumenterna får inte samma svar"</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>myProperty</con:name>
          <con:value>numberOfLinksInParagraphs</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 1</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 2</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:properties/></con:testSuite><con:testSuite id="a86cd8fa-9bf5-46ee-a78e-d92493068497" name="8 Testdata"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="8.1 Validity start_end" searchProperties="true" id="b01176d3-5f04-4d10-865e-21aeaa0f77ed" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="0d5ca08c-fd16-4910-b4c7-9a5b1b4489de">
        <con:settings/>
        <con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())

//Förbered för anrop av 1.2.1
testRunner.testCase.testSteps["Run TestCase 1.2.1"].setPropertyValue("callerName",testRunner.testCase.getName());
</script></con:config>
      </con:testStep>
      <con:testStep type="calltestcase" name="Run TestCase 1.2.1" id="e5a4e5f8-6b31-421f-816e-48d77bac74f6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bcac014f-9de7-48e8-8c45-9d9c6752fd32</con:targetTestCase><con:properties><con:property><con:name>callerName</con:name><con:value>8.1 Validity start_end</con:value></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="request" name="Call GetAlertInformation" id="614bccd7-d2c9-4969-ac26-09f67c069953">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="50fd94e3-6ae2-4241-8124-344ee1959216">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="BasicResponse 8.1"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="09b348ab-198b-4947-bbc5-a8b16b963d5f"/>
            <con:assertion type="SOAP Fault Assertion" id="c121533e-fb45-4742-b87d-8d08c4f31735"/>
            <con:assertion type="Schema Compliance" id="b1cfc53f-f43d-4388-bff4-871c688e0252">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="27e50b76-a43b-4c78-af59-23cdf7b37bdf">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert testdata" id="313fd7c6-6531-4176-89d8-bc742f2354ad">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def id = '/urn:alertInformation/urn1:alertInformationHeader/urn1:documentId'

def condition = { record ->
	def hasstart = record.firstElementAt(start)
	def hasend = record.firstElementAt(end)	
	def hasobsoletetime = record.firstElementAt(obsoleteTime)	
	def endDecides = hasend
	if (hasobsoletetime != null)
		endDecides= record.timestampIsAfter(obsoleteTime,hasend)
			
	return hasstart &amp;&amp; endDecides
}

def recordInfo = sprintf("Testdata innehåller post där start och end för giltighetsdatum används för urvalet. Dvs Obsoletetime finns ej eller är senare än giltighetsdatumets slut.")

ca.assertForAnyRecord(condition, recordInfo)</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>6f3ba4ac-427a-4b1d-a28d-1f3af069fa02</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1714ec9e-0fa7-4b60-8900-7ec271c0f4f2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="8.2 Validity start and Obsolete" searchProperties="true" id="31efb8f5-8870-4ebe-b5ab-8df1d93628c1" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="328964e6-e472-4890-8f21-8ad481e5244b">
        <con:settings/>
        <con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())

//Förbered för anrop av 1.2.1
testRunner.testCase.testSteps["Run TestCase 1.2.1"].setPropertyValue("callerName",testRunner.testCase.getName());
</script></con:config>
      </con:testStep>
      <con:testStep type="calltestcase" name="Run TestCase 1.2.1" id="a589cc8d-3e72-45b3-a255-32a67be347df"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bcac014f-9de7-48e8-8c45-9d9c6752fd32</con:targetTestCase><con:properties><con:property><con:name>callerName</con:name><con:value>8.2 Validity start and Obsolete</con:value></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="request" name="Call GetAlertInformation" id="83e3ef73-0eb7-4844-ac76-0d7b814a189b">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="50fd94e3-6ae2-4241-8124-344ee1959216">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="BasicResponse 8.2"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="09b348ab-198b-4947-bbc5-a8b16b963d5f"/>
            <con:assertion type="SOAP Fault Assertion" id="c121533e-fb45-4742-b87d-8d08c4f31735"/>
            <con:assertion type="Schema Compliance" id="b1cfc53f-f43d-4388-bff4-871c688e0252">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="27e50b76-a43b-4c78-af59-23cdf7b37bdf">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert testdata" id="313fd7c6-6531-4176-89d8-bc742f2354ad">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def id = '/urn:alertInformation/urn1:alertInformationHeader/urn1:documentId'

def condition = { record ->
	def hasstart = record.firstElementAt(start)
	def hasend = record.firstElementAt(end)	
	def hasobsoletetime = record.firstElementAt(obsoleteTime)	
	def endDecides = hasobsoletetime
	
	if (hasend != null)
		endDecides= record.timestampIsBefore(obsoleteTime,hasend)

	return hasstart &amp;&amp; endDecides
}

def recordInfo = sprintf("Testdata innehåller post där start och inaktualitetsdatum används för urvalet. Dvs giltighetsdatumets slut finns ej eller är senare än inaktualitetsdatumet.")

ca.assertForAnyRecord(condition, recordInfo)</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>6f3ba4ac-427a-4b1d-a28d-1f3af069fa02</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1714ec9e-0fa7-4b60-8900-7ec271c0f4f2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="8.3 Validity start only" searchProperties="true" id="d8c01353-ce44-44a5-9448-75b415f95802" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="edbb78b7-b78d-4d95-b5d2-8d81f6ee5f87">
        <con:settings/>
        <con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())

//Förbered för anrop av 1.2.1
testRunner.testCase.testSteps["Run TestCase 1.2.1"].setPropertyValue("callerName",testRunner.testCase.getName());
</script></con:config>
      </con:testStep>
      <con:testStep type="calltestcase" name="Run TestCase 1.2.1" id="c0ba411e-d863-4bcc-bc03-9f15dffc1a96"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>bcac014f-9de7-48e8-8c45-9d9c6752fd32</con:targetTestCase><con:properties><con:property><con:name>callerName</con:name><con:value>8.3 Validity start only</con:value></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="request" name="Call GetAlertInformation" id="b08771a1-6b83-44f4-b71e-4fcd1bb7a1c2">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetAlertInformationResponderBinding</con:interface>
          <con:operation>GetAlertInformation</con:operation>
          <con:request name="Call GetAlertInformation" id="50fd94e3-6ae2-4241-8124-344ee1959216">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="BasicResponse 8.3"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetAlertInformation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetAlertInformation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="09b348ab-198b-4947-bbc5-a8b16b963d5f"/>
            <con:assertion type="SOAP Fault Assertion" id="c121533e-fb45-4742-b87d-8d08c4f31735"/>
            <con:assertion type="Schema Compliance" id="b1cfc53f-f43d-4388-bff4-871c688e0252">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="27e50b76-a43b-4c78-af59-23cdf7b37bdf">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert testdata" id="313fd7c6-6531-4176-89d8-bc742f2354ad">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def start = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:start'
def end = '/urn:alertInformation/urn1:alertInformationBody/urn1:validityTimePeriod/urn1:end'
def obsoleteTime = '/urn:alertInformation/urn1:alertInformationBody/urn1:obsoleteTime'
def id = '/urn:alertInformation/urn1:alertInformationHeader/urn1:documentId'

def condition = { record ->
	def hasstart = record.firstElementAt(start)
	def hasend = record.firstElementAt(end)
	def hasobsoleteTime = record.firstElementAt(obsoleteTime)	
	return hasstart &amp;&amp; !hasobsoleteTime &amp;&amp; !hasend
}

def recordInfo = sprintf("Testdata innehåller post där start för giltighetsdatum finns men inte end eller Obsoletetime")

ca.assertForAnyRecord(condition, recordInfo)</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>6f3ba4ac-427a-4b1d-a28d-1f3af069fa02</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
      <con:breakPoints>
        <con:testStepId>1714ec9e-0fa7-4b60-8900-7ec271c0f4f2</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:properties/></con:testSuite><con:requirements/>
  <con:properties>
    <con:property>
      <con:name>xmlns:urn</con:name>
      <con:value>urn:riv:clinicalprocess:healthcond:description:GetAlertInformationResponder:2</con:value>
    </con:property>
    <con:property>
      <con:name>xmlns:urn1</con:name>
      <con:value>urn:riv:clinicalprocess:healthcond:description:2</con:value>
    </con:property>
    <con:property>
      <con:name>RecordElementPath</con:name>
      <con:value>//urn:alertInformation</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>