<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetCareDocumentation 2.1" resourceRoot="${projectDir}" soapui-version="5.7.1" abortOnError="false" runType="SEQUENTIAL" id="faf70bf6-244f-4662-9d6c-c0da53b91b52" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetCareDocumentationResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21}GetCareDocumentationResponderBinding" soapVersion="1_1" anonymous="optional" definition="../../schemas/interactions/GetCareDocumentationInteraction/GetCareDocumentationInteraction_2.1_RIVTABP21.wsdl" id="de2a3723-286e-4c6c-b7c6-53b03d0a109e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart="file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetCareDocumentationInteraction/GetCareDocumentationInteraction_2.1_RIVTABP21.wsdl">
      <con:part>
        <con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetCareDocumentationInteraction/GetCareDocumentationInteraction_2.1_RIVTABP21.wsdl</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetCareDocumentationInteraction" targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:tjsi="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationInitiator:2" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetCareDocumentationInteraction
			 Beskrivning: 
			   Request care documentation for a subject of care
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:healthcond:description
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentation:2:rivtabp21">
      <xs:import schemaLocation="GetCareDocumentationResponder_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetCareDocumentationRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation>National: The HSA-id of Inera AB ("national" aggregation service)
			Regional: The HSA-id of Inera AB (regional aggregation service)
			Specific Source system: The HSA-id of the source system</wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetCareDocumentation"/>
  </wsdl:message>
  <wsdl:message name="GetCareDocumentationResponse">
    <wsdl:part name="parameters" element="tjsr:GetCareDocumentationResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetCareDocumentationResponderInterface">
    <wsdl:operation name="GetCareDocumentation">
      <wsdl:input message="tns:GetCareDocumentationRequest"/>
      <wsdl:output message="tns:GetCareDocumentationResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetCareDocumentationResponderBinding" type="tns:GetCareDocumentationResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetCareDocumentation">
      <soap:operation soapAction="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2:GetCareDocumentation" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetCareDocumentationRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetCareDocumentationResponderService">
    <wsdl:port name="GetCareDocumentationResponderPort" binding="tns:GetCareDocumentationResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
      <con:part>
        <con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/interactions/GetCareDocumentationInteraction/GetCareDocumentationResponder_2.1.xsd</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:core="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2" xmlns:m1="urn:riv:clinicalprocess:healthcond:description:2.1">
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:2"/>
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:import namespace="urn:riv:clinicalprocess:healthcond:description:2.1" schemaLocation="../../core_components/clinicalprocess_healthcond_description_2.1_ext.xsd"/>
  <xs:element name="GetCareDocumentation" type="tns:GetCareDocumentationType"/>
  <xs:element name="GetCareDocumentationResponse" type="tns:GetCareDocumentationResponseType"/>
  <xs:complexType name="GetCareDocumentationType">
    <xs:sequence>
      <xs:element name="careUnitHSAid" type="core:HSAIdType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="patientId" type="core:PersonIdType"/>
      <xs:element name="timePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAid" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetCareDocumentationResponseType">
    <xs:annotation>
      <xs:documentation>careDocumentation: 
					De vårddokument som matchar begäran.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="careDocumentation" type="core:CareDocumentationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="m1:result" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
      <con:part>
        <con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/clinicalprocess_healthcond_description_2.1.xsd</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:2" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="./clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:complexType name="CareDocumentationType">
    <xs:sequence>
      <xs:element name="careDocumentationHeader" type="tns:CPatientSummaryHeaderType"/>
      <xs:element name="careDocumentationBody" type="tns:CareDocumentationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareDocumentationBodyType">
    <xs:sequence>
      <xs:element name="clinicalDocumentNote" type="tns:ClinicalDocumentNoteType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentType">
    <xs:sequence>
      <xs:element name="functionalStatusAssessmentHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="functionalStatusAssessmentBody" type="tns:FunctionalStatusAssessmentBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="FunctionalStatusAssessmentBodyType">
    <xs:sequence>
      <xs:element name="assessmentCategory" type="codes:AssessmentCategoryEnum"/>
      <xs:element minOccurs="0" name="comment" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="padl" type="tns:PADLType"/>
      <xs:element maxOccurs="1" minOccurs="0" name="disability" type="tns:DisabilityType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--@TODO better names for clinicalDocumentNoteCode-->
  <xs:complexType name="ClinicalDocumentNoteType">
    <xs:sequence>
      <xs:element name="clinicalDocumentNoteCode" type="codes:ClinicalDocumentNoteCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentTypeCode" type="codes:ClinicalDocumentTypeCodeEnum" minOccurs="0" maxOccurs="1"/>
      <xs:element name="clinicalDocumentNoteTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="clinicalDocumentNoteText" type="xs:string" maxOccurs="1" minOccurs="0"/>
      <xs:element name="multimediaEntry" type="tns:MultimediaType" minOccurs="0" maxOccurs="1"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="dissentintOpinion" type="tns:DissentingOpinionType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAId" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Only used here to keep backwards compatibility with GetCareDocumentation 2.0, must be removed in favour
        of PatientSummaryHeaderType above when we go for the next major version-->
  <xs:complexType name="CPatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAid" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0"/>
      <xs:element name="documentTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="nullified" type="xs:boolean"/>
      <xs:element minOccurs="0" name="nullifiedReason" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HealthcareProfessionalType">
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="healthcareProfessionalHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalName" type="xs:string" minOccurs="0"/>
      <xs:element name="healthcareProfessionalRoleCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="healthcareProfessionalCareGiverHSAId" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrgUnitType">
    <xs:sequence>
      <xs:element name="orgUnitHSAId" type="tns:HSAIdType" minOccurs="1"/>
      <xs:element name="orgUnitName" type="xs:string" minOccurs="1"/>
      <xs:element name="orgUnitTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitLocation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisType">
    <xs:sequence>
      <xs:element name="diagnosisHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="diagnosisBody" type="tns:DiagnosisBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DiagnosisBodyType">
    <xs:sequence>
      <xs:element name="typeOfDiagnosis" type="codes:DiagnosisTypeEnum"/>
      <xs:element minOccurs="0" name="chronicDiagnosis" type="xs:boolean"/>
      <xs:element name="diagnosisTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="diagnosisCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="relatedDiagnosis" type="tns:RelatedDiagnosisType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationType">
    <xs:sequence>
      <xs:element name="alertInformationHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="alertInformationBody" type="tns:AlertInformationBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedDiagnosisType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AlertInformationBodyType">
    <xs:sequence>
      <xs:element name="typeOfAlertInformation" type="tns:CVType"/>
      <xs:element name="ascertainedDate" type="tns:DateType" minOccurs="0"/>
      <xs:element name="verifiedTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="validityTimePeriod" type="tns:TimePeriodType"/>
      <xs:element name="alertInformationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="obsoleteTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="obsoleteComment" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivity" type="tns:HyperSensitivityType" minOccurs="0"/>
      <xs:element name="seriousDisease" type="tns:SeriousDiseaseType" minOccurs="0"/>
      <xs:element name="treatment" type="tns:TreatmentType" minOccurs="0"/>
      <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType" minOccurs="0"/>
      <xs:element name="restrictionOfCare" minOccurs="0" type="tns:RestrictionOfCareType"/>
      <xs:element name="unstructuredAlertInformation" minOccurs="0" type="tns:UnstructuredAlertInformationType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="relatedAlertInformation" type="tns:RelatedAlertInformationType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HyperSensitivityType">
    <xs:sequence>
      <xs:element name="typeOfHypersensitivity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfSeverity" type="tns:CVType" minOccurs="0"/>
      <xs:element name="degreeOfCertainty" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalHypersensitivity" type="tns:PharmaceuticalHypersensitivityType" minOccurs="0"/>
      <xs:element name="otherHypersensitivity" type="tns:OtherHypersensitivityType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PharmaceuticalHypersensitivityType">
    <xs:sequence>
      <xs:element name="atcSubstance" type="tns:CVType" minOccurs="0"/>
      <xs:element name="nonATCSubstance" type="xs:string" minOccurs="0"/>
      <xs:element name="nonATCSubstanceComment" type="xs:string" minOccurs="0"/>
      <xs:element name="pharmaceuticalProductId" type="tns:CVType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OtherHypersensitivityType">
    <xs:sequence>
      <xs:element name="hypersensitivityAgent" type="xs:string" minOccurs="0"/>
      <xs:element name="hypersensitivityAgentCode" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SeriousDiseaseType">
    <xs:sequence>
      <xs:element name="disease" type="tns:CVType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TreatmentType">
    <xs:sequence>
      <xs:element name="treatmentDescription" type="xs:string"/>
      <xs:element name="treatmentCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="pharmaceuticalTreatment" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CommunicableDiseaseType">
    <xs:sequence>
      <xs:element name="communicableDiseaseCode" type="tns:CVType"/>
      <xs:element name="routeOfTransmission" type="tns:CVType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RestrictionOfCareType">
    <xs:sequence>
      <xs:element name="restrictionOfCareComment" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="UnstructuredAlertInformationType">
    <xs:sequence>
      <xs:element name="unstructuredAlertInformationHeading" type="xs:string"/>
      <xs:element name="unstructuredAlertInformationContent" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelatedAlertInformationType">
    <xs:sequence>
      <xs:element name="typeOfAlertInformationRelationship" type="tns:CVType"/>
      <xs:element name="relationComment" type="xs:string" minOccurs="0"/>
      <xs:element name="documentId" type="xs:string" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PADLType">
    <xs:sequence>
      <xs:element name="typeOfAssessment" type="tns:CVType"/>
      <xs:element name="assessment" type="xs:string" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DisabilityType">
    <xs:sequence>
      <xs:element name="disabilityAssessment" type="tns:CVType"/>
      <xs:element name="comment" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--Below: only helper types allowed.
        
        A helper type is a type used in one ore more of the domain schema common types.
        It can also be a type used in two or more service schemas.-->
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall med hjälp av start-
                och slutdatum. start: Startdatum på formatet ÅÅÅÅMMDD end: Slutdatum på formatet
                ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType"/>
      <xs:element name="end" type="tns:DateType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--YYYYMMDD-->
  <xs:simpleType name="DateType">
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall med hjälp av start-
                och slutdatum. start: Startdatum på formatet YYYYMMDDhhmmss end: Slutdatum på
                formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="end" type="tns:TimeStampType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time. A point in
                time is most often represented as a calendar expression. The time has the format
                YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CVType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystem" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemName" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemVersion" type="xs:string" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="originalText" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="legalAuthenticatorName" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DissentingOpinionType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="opinionId" type="tns:IIType" minOccurs="0"/>
      <xs:element name="authorTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="opinion" type="xs:string"/>
      <xs:element name="personId" type="tns:PersonIdType"/>
      <xs:element name="personName" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PQType">
    <xs:sequence>
      <xs:element name="value" type="xs:double"/>
      <xs:element name="unit" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IIType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="root" type="xs:string"/>
      <xs:element name="extension" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonIdType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="communicableDisease" type="tns:CommunicableDiseaseType"/>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
      <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
      <xs:element name="logId" type="xs:string"/>
      <xs:element minOccurs="0" name="subCode" type="xs:string"/>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
      <con:part>
        <con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/clinicalprocess_healthcond_description_enum_2.1.xsd</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:enums:2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:simpleType name="ClinicalDocumentNoteCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk Anteckningstyp (1.2.752.129.2.2.2.11):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="utr">
        <xs:annotation>
          <xs:documentation>Utredning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="atb">
        <xs:annotation>
          <xs:documentation>Åtgärd/Behandling</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sam">
        <xs:annotation>
          <xs:documentation>Sammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sao">
        <xs:annotation>
          <xs:documentation>Samordning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ins">
        <xs:annotation>
          <xs:documentation>Inskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="slu">
        <xs:annotation>
          <xs:documentation>Slutanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="auf">
        <xs:annotation>
          <xs:documentation>Anteckning utan fysiskt möte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="sva">
        <xs:annotation>
          <xs:documentation>Slutenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="bes">
        <xs:annotation>
          <xs:documentation>Besöksanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
      <xs:enumeration value="model/vrml"/>
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ClinicalDocumentTypeCodeEnum">
    <xs:annotation>
      <xs:documentation>Kod för typ av anteckning.
                Tillåtna värden från kodverk (?.?.?.?.?.?):</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="epi">
        <xs:annotation>
          <xs:documentation>Epikris</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="int">
        <xs:annotation>
          <xs:documentation>Intagninganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="dag">
        <xs:annotation>
          <xs:documentation>Daganteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ova">
        <xs:annotation>
          <xs:documentation>Öppenvårdsanteckning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovs">
        <xs:annotation>
          <xs:documentation>Öppenvårdssammanfattning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ovr">
        <xs:annotation>
          <xs:documentation>Övrigt dokument</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AssessmentCategoryEnum">
    <xs:annotation>
      <xs:documentation>Bedömningskategori.
                Beskriver vilken kategori av bedömning som är gjord. Tillåtna värden är "pad-pad" (för PADL-bedömning) och "fun-fun" (för funktionsnedsättningsbedömningar).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="pad-pad">
        <xs:annotation>
          <xs:documentation>PADL-bedömning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="fun-fun">
        <xs:annotation>
          <xs:documentation>funktionsnedsättningsbedömningar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DiagnosisTypeEnum">
    <xs:annotation>
      <xs:documentation>Anges som "Huvuddiagnos", "Bidiagnos".</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Huvuddiagnos">
        <xs:annotation>
          <xs:documentation>Huvuddiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Bidiagnos">
        <xs:annotation>
          <xs:documentation>Bidiagnos</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
      <xs:enumeration value="INFO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ErrorCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INVALID_REQUEST"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
      <con:part>
        <con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/clinicalprocess_healthcond_description_2.1_ext.xsd</con:url>
        <con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:description:2.1" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:m1="urn:riv:clinicalprocess:healthcond:description:2.1" xmlns:codes="urn:riv:clinicalprocess:healthcond:description:enums:2">
  <xs:import schemaLocation="clinicalprocess_healthcond_description_enum_2.1.xsd" namespace="urn:riv:clinicalprocess:healthcond:description:enums:2"/>
  <xs:element name="result">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
        <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
        <xs:element name="logId" type="xs:string"/>
        <xs:element minOccurs="0" name="subCode" type="xs:string"/>
        <xs:element name="message" type="xs:string" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
      <con:part>
        <con:url>file:/Users/khaled/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/description/trunk/schemas/core_components/itintegration_registry_1.0.xsd</con:url>
        <con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content>
        <con:type>http://www.w3.org/2001/XMLSchema</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>${webServiceUrl}</con:endpoint>
      <con:endpoint>http://tempuri.org</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2:GetCareDocumentation" name="GetCareDocumentation" bindingOperationName="GetCareDocumentation" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="aace76cc-3fe7-4df7-b878-5ba581fb260f">
      <con:settings/>
      <con:call name="Request 1" id="e1f374ac-2c9c-4f78-9655-a790354a5961">
        <con:settings/>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${webServiceUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAid>?</urn1:careUnitHSAid>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAid>?</urn1:sourceSystemHSAid>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2:GetCareDocumentation"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:testSuite name="1 Basic tests" id="766492a3-89db-4a2a-a132-861b11509815">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.1.1 Personnummer" searchProperties="true" id="726e1d53-f58c-44dd-8908-66e8776a159c">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="02896559-faa6-4219-9950-2e5abe0d66ce">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="7ab7f875-a563-4e4f-afb5-7f94b496c9ae">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="de9391b8-5e26-41cb-a769-334d7871d34e">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Only PatientId"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7364b692-9273-4d75-9e5a-cc77cd07b770"/>
            <con:assertion type="SOAP Fault Assertion" id="12fe3640-2056-4fd3-9d48-f03133e41987"/>
            <con:assertion type="Schema Compliance" id="a01ea20a-f113-4e3a-89d5-2c74bb874da6">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="5f06e959-70ca-41e3-aad6-dd9b31ce5ba3">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText></con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="728942d6-4777-4412-b4ed-84b594500c31">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.1.2 Samordningsnummer" searchProperties="true" id="bc953763-df3c-420e-95ac-5ed94b6e9443">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="1946eb38-8e39-4603-a840-dc5db350aa2f">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="96c25265-bf55-4f5d-adb9-5bc68d38f42c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="de9391b8-5e26-41cb-a769-334d7871d34e">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Only PatientId"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7364b692-9273-4d75-9e5a-cc77cd07b770"/>
            <con:assertion type="SOAP Fault Assertion" id="12fe3640-2056-4fd3-9d48-f03133e41987"/>
            <con:assertion type="Schema Compliance" id="a01ea20a-f113-4e3a-89d5-2c74bb874da6">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="5f06e959-70ca-41e3-aad6-dd9b31ce5ba3">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="728942d6-4777-4412-b4ed-84b594500c31">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.1.3 Lokalt reservnummer" searchProperties="true" id="fadaa668-d838-423a-bec7-47ee5e85a488">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="f6dff53e-9a4e-4f7a-bf07-a91d75c7687e">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="a86d8025-5a25-4c6f-94d2-5876a3a75c2a">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="de9391b8-5e26-41cb-a769-334d7871d34e">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Only PatientId"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAId}</urn1:sourceSystemHSAid>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7364b692-9273-4d75-9e5a-cc77cd07b770"/>
            <con:assertion type="SOAP Fault Assertion" id="12fe3640-2056-4fd3-9d48-f03133e41987"/>
            <con:assertion type="Schema Compliance" id="a01ea20a-f113-4e3a-89d5-2c74bb874da6">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="5f06e959-70ca-41e3-aad6-dd9b31ce5ba3">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert PatientId" id="728942d6-4777-4412-b4ed-84b594500c31">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id', context.patientId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    
    <con:testCase id="51dadb92-0964-4d02-8147-678afa2cc83f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.2.1 timePeriod" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Read data" id="7fa63f22-1728-45f8-88b6-83bc7f9b0bf8"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation no filter" id="d908219b-10dc-45c6-b330-5f53c00652f5">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation no filter" id="de9391b8-5e26-41cb-a769-334d7871d34e">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="timeBlaster-response"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7364b692-9273-4d75-9e5a-cc77cd07b770"/>
            <con:assertion type="SOAP Fault Assertion" id="12fe3640-2056-4fd3-9d48-f03133e41987"/>
            <con:assertion type="Schema Compliance" id="a01ea20a-f113-4e3a-89d5-2c74bb874da6">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="5f06e959-70ca-41e3-aad6-dd9b31ce5ba3">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Get all records" id="728942d6-4777-4412-b4ed-84b594500c31">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

context.allRecords = ca.getContentRecords()
log.info context.allRecords</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Calculate interval" id="9ec09ecd-941b-474c-90fb-336c7f654079"><con:settings/><con:config><script>def documentTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentTime'
def authorTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:authorTime'
def signatureTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator/urn1:signatureTime'
def dissentingAuthorTime = '/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:dissentintOpinion/urn1:authorTime'

if (!context.allRecords) {
	testRunner.fail("No records")
	return
}
if (!context.dates) {
	def documentTimes = context.allRecords.collect { record -> record.firstElementAt(documentTime) }
	def authorTimes = context.allRecords.collect { record -> record.firstElementAt(authorTime) }
	def signatureTimes = context.allRecords.collect { record -> record.firstElementAt(signatureTime) }
	def dissentingAuthorTimes = context.allRecords.collect { record -> record.firstElementAt(dissentingAuthorTime) }
	
	context.dates = documentTimes.findAll().collect{ it[0..7] }.unique()
	context.dates += authorTimes.findAll().collect{ it[0..7] }.unique()
	context.dates += signatureTimes.findAll().collect{ it[0..7] }.unique()
	context.dates += dissentingAuthorTimes.findAll().collect{ it[0..7] }.unique()
	
	context.dates = context.dates.findAll().collect{ it[0..7] }.unique()
	log.info "Antaltidpunkter" + context.dates
	
	if (!context.dates) {
		testRunner.fail("No data")
	}
}

context.timePeriodStart = context.dates.pop()
context.timePeriodEnd = context.timePeriodStart

[context.timePeriodStart, context.timePeriodEnd]</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation timePeriod" id="b73798a3-346f-4350-b855-12c9a4997dab">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation timePeriod" id="b6512245-636a-4f1a-a0ac-0ceca7de68f6">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="timeBlaster-response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="2028416b-593a-42e7-84a1-2a41df4760a2"/>
            <con:assertion type="SOAP Fault Assertion" id="68e27265-abd6-4b9b-8574-7e3a5a3466a4"/>
            <con:assertion type="Schema Compliance" id="ea290c35-e7a6-4f17-b026-fb84cba77e89">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="8ccf9afe-7094-48f9-9469-4ef65ead83f8">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert records" id="d812b7ce-3456-4e89-be35-faa3fdd0cdd9">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def documentTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentTime'
def authorTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:authorTime'
def signatureTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator/urn1:signatureTime'
def dissentingAuthorTime = '/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:dissentintOpinion/urn1:authorTime'

def id = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId'

def condition = { record ->
     def requestStartFilled = context.timePeriodStart + '000000'
     def requestEndFilled = context.timePeriodEnd + '235959'
	def documentTimeWithin = record.timestampInRange(documentTime, requestStartFilled, requestEndFilled)
	def authorTimeWithin = record.timestampInRange(authorTime, requestStartFilled, requestEndFilled)
	def signatureTimeWithin = record.firstElementAt(signatureTime) != null &amp;&amp; record.timestampInRange(signatureTime, requestStartFilled, requestEndFilled)
     def dissentingAuthorTimes = record.allElementsAt(dissentingAuthorTime)
     def dissentingAuthorTimeWithin = false
     dissentingAuthorTimes.each {
     	if(it >= requestStartFilled &amp;&amp; it &lt;= requestEndFilled) {
     		dissentingAuthorTimeWithin = true
     	}
     }
	return (documentTimeWithin || authorTimeWithin || signatureTimeWithin || dissentingAuthorTimeWithin)
}

def recordInfo = { record ->
	sprintf("DocumentId %s (documentTime:%s authorTime:%s signatureTime:%s dissentingAuthorTime:%s)", [id, documentTime, authorTime, signatureTime, dissentingAuthorTime ].collect{record.firstElementAt(it)})
}

ca.assertFilteredResponse(context.allRecords, condition, recordInfo)</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Evaluate" id="256e47ca-a9df-4766-a986-3051afe0cccc"><con:settings/><con:config><script>if (context.dates.any()) {
	testRunner.gotoStepByName( "Calculate interval")
}
else if (testRunner.getResults().any{it.getStatus().toString() == 'FAILED'}) {
	testRunner.fail("One or more steps failed")
}
</script></con:config></con:testStep><con:properties/></con:testCase>
    
    
    
    
    
    
    
    
    
    <con:testCase id="6bd3dbc9-4b42-4e40-8dc5-64dcc155f0d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.2.2 timePeriod intervall" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Read data" id="e3fd2caf-a66f-4a60-a24b-810859f8856b"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation no filter" id="b0b5107a-c7a9-4783-ba87-fc264710162e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation no filter" id="de9391b8-5e26-41cb-a769-334d7871d34e">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="timeBlaster-response"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7364b692-9273-4d75-9e5a-cc77cd07b770"/>
            <con:assertion type="SOAP Fault Assertion" id="12fe3640-2056-4fd3-9d48-f03133e41987"/>
            <con:assertion type="Schema Compliance" id="a01ea20a-f113-4e3a-89d5-2c74bb874da6">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="5f06e959-70ca-41e3-aad6-dd9b31ce5ba3">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Get all records" id="728942d6-4777-4412-b4ed-84b594500c31">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

context.allRecords = ca.getContentRecords()</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Calculate interval" id="34c92dd1-2b55-4cf4-958e-130ee86e24cb"><con:settings/><con:config><script>def documentTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentTime'
def authorTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:authorTime'
def signatureTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator/urn1:signatureTime'
def dissentingAuthorTime = '/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:dissentintOpinion/urn1:authorTime'
def dateFormat = 'yyyyMMdd'

if (!context.allRecords) {
	testRunner.fail("No records")
	return
}
if (!context.dates) {
	def documentTimes = context.allRecords.collect { record -> record.firstElementAt(documentTime) }
	def authorTimes = context.allRecords.collect { record -> record.firstElementAt(authorTime) }
	def signatureTimes = context.allRecords.collect { record -> record.firstElementAt(signatureTime) }
	def dissentingAuthorTimes = context.allRecords.collect { record -> record.firstElementAt(dissentingAuthorTime) }
	def dates = (documentTimes + authorTimes + signatureTimes + dissentingAuthorTimes).findAll().collect { it[0..7] }.unique()
	
	def firstDate = Date.parse(dateFormat, dates.min())
	def lastDate = Date.parse(dateFormat, dates.max())
	def dateDiff = lastDate - firstDate
	context.dates =  []
	(2 * context.numberOfIntervals.toInteger()).times {
		def randomOffset = (Math.random() * (dateDiff+1)).toInteger()
		def randomDate = firstDate.plus(randomOffset).format(dateFormat)
		context.dates.add(randomDate)
	}
}

def dates = [context.dates.pop(), context.dates.pop()].sort()
context.timePeriodStart = dates[0]
context.timePeriodEnd = dates[-1]

[context.timePeriodStart, context.timePeriodEnd]
</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation timePeriod" id="77fb98de-98ce-4e12-ba58-10e60a2c28e3">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation timePeriod" id="b6512245-636a-4f1a-a0ac-0ceca7de68f6">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="timeBlaster-response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="2028416b-593a-42e7-84a1-2a41df4760a2"/>
            <con:assertion type="SOAP Fault Assertion" id="68e27265-abd6-4b9b-8574-7e3a5a3466a4"/>
            <con:assertion type="Schema Compliance" id="ea290c35-e7a6-4f17-b026-fb84cba77e89">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="8ccf9afe-7094-48f9-9469-4ef65ead83f8">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert records" id="d812b7ce-3456-4e89-be35-faa3fdd0cdd9">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def documentTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentTime'
def authorTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:authorTime'
def signatureTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator/urn1:signatureTime'
def dissentingAuthorTime = '/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:dissentintOpinion/urn1:authorTime'

def id = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId'

def condition = { record ->
     def requestStartFilled = context.timePeriodStart + '000000'
     def requestEndFilled = context.timePeriodEnd + '235959'
	def documentTimeWithin = record.timestampInRange(documentTime, requestStartFilled, requestEndFilled)
	def authorTimeWithin = record.timestampInRange(authorTime, requestStartFilled, requestEndFilled)
	def signatureTimeWithin = record.firstElementAt(signatureTime) != null &amp;&amp; record.timestampInRange(signatureTime, requestStartFilled, requestEndFilled)
     def dissentingAuthorTimes = record.allElementsAt(dissentingAuthorTime)
     def dissentingAuthorTimeWithin = false
     dissentingAuthorTimes.each {
     	if(it >= requestStartFilled &amp;&amp; it &lt;= requestEndFilled) {
     		dissentingAuthorTimeWithin = true
     	}
     }
	return (documentTimeWithin || authorTimeWithin || signatureTimeWithin || dissentingAuthorTimeWithin)
}

def recordInfo = { record ->
	sprintf("DocumentId %s (documentTime:%s authorTime:%s signatureTime:%s dissentingAuthorTime:%s)", [id, documentTime, authorTime, signatureTime, dissentingAuthorTime ].collect{record.firstElementAt(it)})
}

ca.assertFilteredResponse(context.allRecords, condition, recordInfo)</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Evaluate" id="d859739b-e2f2-4a3d-91c4-7285d81e4aa8"><con:settings/><con:config><script>if (context.dates.any()) {
	testRunner.gotoStepByName( "Calculate interval")
}
else if (testRunner.getResults().any{it.getStatus().toString() == 'FAILED'}) {
	testRunner.fail("One or more steps failed")
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9ad2db95-e814-4160-bd3d-538d6d65543f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.2.3 timePeriod empty response" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Read data" id="3310b694-7f01-4ec8-8b17-42d5604a96c6"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation timePeriod" id="8202d98c-2709-4874-97bd-afc189c8f033">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation timePeriod" id="b6512245-636a-4f1a-a0ac-0ceca7de68f6">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Empty Response"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="2028416b-593a-42e7-84a1-2a41df4760a2"/>
            <con:assertion type="SOAP Fault Assertion" id="68e27265-abd6-4b9b-8574-7e3a5a3466a4"/>
            <con:assertion type="Schema Compliance" id="ea290c35-e7a6-4f17-b026-fb84cba77e89">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="8ccf9afe-7094-48f9-9469-4ef65ead83f8">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert empty response" id="d812b7ce-3456-4e89-be35-faa3fdd0cdd9">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:properties/></con:testCase><con:testCase id="ddc1945b-25db-4cf6-ab49-5b8bdff77660" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.2.4 timePeriod manuell" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Read data" id="537c305c-8046-4061-af8a-f9f5086490ba"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script></con:config></con:testStep><con:testStep type="request" name="Call GetCareDocumentation no filter" id="a1b2f207-6997-44db-a851-f2d4fd320034">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation no filter" id="de9391b8-5e26-41cb-a769-334d7871d34e">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7364b692-9273-4d75-9e5a-cc77cd07b770"/>
            <con:assertion type="SOAP Fault Assertion" id="12fe3640-2056-4fd3-9d48-f03133e41987"/>
            <con:assertion type="Schema Compliance" id="a01ea20a-f113-4e3a-89d5-2c74bb874da6">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="5f06e959-70ca-41e3-aad6-dd9b31ce5ba3">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Get all records" id="728942d6-4777-4412-b4ed-84b594500c31">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

context.allRecords = ca.getContentRecords()</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:testStep type="request" name="Call GetCareDocumentation timePeriod" id="f0940f2f-c7cc-436c-afdc-80a3f0f66b99">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation timePeriod" id="b6512245-636a-4f1a-a0ac-0ceca7de68f6">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="2028416b-593a-42e7-84a1-2a41df4760a2"/>
            <con:assertion type="SOAP Fault Assertion" id="68e27265-abd6-4b9b-8574-7e3a5a3466a4"/>
            <con:assertion type="Schema Compliance" id="ea290c35-e7a6-4f17-b026-fb84cba77e89">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="8ccf9afe-7094-48f9-9469-4ef65ead83f8">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert expected records" id="d812b7ce-3456-4e89-be35-faa3fdd0cdd9">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def documentTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentTime'
def authorTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:authorTime'
def signatureTime = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator/urn1:signatureTime'
def dissentingAuthorTime = '/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:dissentintOpinion/urn1:authorTime'

def id = '/urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId'

def condition = { record ->
     def requestStartFilled = context.timePeriodStart + '000000'
     def requestEndFilled = context.timePeriodEnd + '235959'
	def documentTimeWithin = record.timestampInRange(documentTime, requestStartFilled, requestEndFilled)
	def authorTimeWithin = record.timestampInRange(authorTime, requestStartFilled, requestEndFilled)
	def signatureTimeWithin = record.firstElementAt(signatureTime) != null &amp;&amp; record.timestampInRange(signatureTime, requestStartFilled, requestEndFilled)
     def dissentingAuthorTimes = record.allElementsAt(dissentingAuthorTime)
     def dissentingAuthorTimeWithin = false
     dissentingAuthorTimes.each {
     	if(it >= requestStartFilled &amp;&amp; it &lt;= requestEndFilled) {
     		dissentingAuthorTimeWithin = true
     	}
     }
	return (documentTimeWithin || authorTimeWithin || signatureTimeWithin || dissentingAuthorTimeWithin)
}

def recordInfo = { record ->
	sprintf("DocumentId %s (documentTime:%s authorTime:%s signatureTime:%s dissentingAuthorTime:%s)", [id, documentTime, authorTime, signatureTime, dissentingAuthorTime ].collect{record.firstElementAt(it)})
}

ca.assertFilteredResponse(context.allRecords, condition, recordInfo)</scriptText></con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.3 CareUnit" searchProperties="true" id="99202dba-188d-44d2-9aec-7bc206afebf1">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="c32c9c42-25f7-4e43-92bd-467a8480cb60">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="9eec8c76-8495-468d-8348-084f28d227a8">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="e2daabb7-35ee-469a-9f5a-e9c415e78fde">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Response CareUnitHsaId"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:careUnitHSAid>${careUnitHSAid}</urn1:careUnitHSAid>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="a8418266-4209-4dbb-a38e-e00e8098bf04"/>
            <con:assertion type="SOAP Fault Assertion" id="bd728d25-edf5-4b4f-99da-3c9efe0b865c"/>
            <con:assertion type="Schema Compliance" id="37eaafc4-9335-481e-842c-58938edc34d0">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="f1534b82-a917-49c9-9a52-7a4b6712fa3a">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert CareUnit" id="4689163d-171d-4e1b-9f43-32f6741abe32">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId', context.careUnitHSAid)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.4 SourceSystem" searchProperties="true" id="eea4f049-714b-46e1-95cb-a7fadeb53449">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="f262e20d-96e0-40e0-9740-03e3d926d376">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="136461fb-9ddf-4f6d-9597-fc96b07f4c2e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="18486f87-402a-4b86-a109-5d581e08f8a4">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="source_system"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAId}</urn1:sourceSystemHSAid>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7c5196a6-f994-4534-8570-8dbd3ff6df6f"/>
            <con:assertion type="SOAP Fault Assertion" id="eb1dbe3c-26b6-47bf-a65c-fcb2a6996167"/>
            <con:assertion type="Schema Compliance" id="07392ff7-5485-4fe7-8681-8fd21a06a327">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="e3a979a7-4fb6-4a83-bd0a-33ea685035b8">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert SourceSystem" id="ac1bca7a-5d5d-4e37-bd70-073645c5a579">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:sourceSystemHSAid', context.sourceSystemHSAId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.5 CareContact" searchProperties="true" id="79083793-e02e-4e68-a0ee-00759a8eb403">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="19222a94-bef9-4882-9dec-497bef0883d6">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="e3f9f87d-f140-439b-ad88-29adf2e84a9c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="18486f87-402a-4b86-a109-5d581e08f8a4">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactId Filter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAId}</urn1:sourceSystemHSAid>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7c5196a6-f994-4534-8570-8dbd3ff6df6f"/>
            <con:assertion type="SOAP Fault Assertion" id="eb1dbe3c-26b6-47bf-a65c-fcb2a6996167"/>
            <con:assertion type="Schema Compliance" id="07392ff7-5485-4fe7-8681-8fd21a06a327">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="e3a979a7-4fb6-4a83-bd0a-33ea685035b8">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert CareContact" id="ac1bca7a-5d5d-4e37-bd70-073645c5a579">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:careContactId', context.careContactId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.7 SoapFault" searchProperties="true" id="15233b31-f71a-4de9-8cb6-010a52225bae">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="3d3c67fd-f90c-4b12-942e-e7ac71c73c21">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="aca05d28-41ce-4a92-b1dd-de8795ee04bb">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="de9391b8-5e26-41cb-a769-334d7871d34e">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="SOAP Exception"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="7364b692-9273-4d75-9e5a-cc77cd07b770"/>
            <con:assertion type="Not SOAP Fault Assertion" id="cddda7f7-851a-4018-bfb1-8ca9870103c8" name="SOAP Fault"/>
            <con:assertion type="GroovyScriptAssertion" id="d62458d5-e16c-4d50-8ecd-d6b8c6b32c5c" name="Log Request Response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContextHelperTK
new ContextHelperTK(context, messageExchange, log).logTestData()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.8 NonExisting Patient" searchProperties="true" id="619cb2e9-99a9-4b0e-9d1c-033a369f473f">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="4806c6f4-f917-4005-b73d-a48cec09a906">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="0ae2eb1e-abdb-44b4-93a9-d8929fcb8822">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="1a3257bc-a851-4ed8-a465-62f577dbca1a">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Empty Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="a749d405-86f8-4c01-803f-3181077bb5b7"/>
            <con:assertion type="SOAP Fault Assertion" id="3610511d-c728-4584-9f2e-44027b289e9e"/>
            <con:assertion type="Schema Compliance" id="79027b83-84e4-4d8e-960e-218d5fc03c66">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Empty Response" id="15f66911-cb8e-47bb-8c76-a55f38fbe799">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.9 NonExisting CareContact" searchProperties="true" id="4bc42ef6-e15a-41ae-b62f-db96088526e8">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="092b1df1-c29d-4fbf-9afc-d15ee7fa28b8">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="2baf64f7-091f-48c2-8d6d-a26877fcbd67">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="cc683ace-83c5-4bff-bcc0-28ac9e7c07ad">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Empty Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAid>${sourceSystemHSAId}</urn1:sourceSystemHSAid>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="75224e14-49ab-42c5-8d33-1cbe5380a5b1"/>
            <con:assertion type="SOAP Fault Assertion" id="c797798e-9a1a-431c-b241-4c22041a4e46"/>
            <con:assertion type="Schema Compliance" id="c3cb0595-f101-4b27-a7c7-1ad06c92f840">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Empty Response" id="3aa5f7d6-2fb9-4c9e-b9af-430e3a590053">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase><con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="9b4bc804-a5bb-4e2a-84f5-7addb934bd75" name="2 Content - Common">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="20dfb333-4589-41c4-9504-050539a4e49a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.1 Encoding_HeaderProlog" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="ffd5e59a-78f8-4592-9f5c-1f62a42fec3a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="673448ed-86c1-4bfc-a904-cf60e88c7b2a">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="8595e0f7-0606-40f6-b792-e5347ec6c023">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Only PatientId"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAid>?</urn1:careUnitHSAid>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAid>?</urn1:sourceSystemHSAid>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="ed23c3de-6293-4537-8f01-849313de96f0"/>
            <con:assertion type="SOAP Fault Assertion" id="c68f2947-b2fb-4a3a-9fed-7291e99c22f1"/>
            <con:assertion type="Schema Compliance" id="c57ac91f-6e90-4043-ad1a-3ba9af31a48f">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="b84c9248-9638-4fea-83a7-580603200774" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="f37b1fd4-f774-495e-88e5-347890e57c0b" name="Assert Content-Type">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange,log)
ca.assertValidEncoding()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="480b3d05-2666-4a56-87b7-d3da4c063424" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.2 Encoding_SpecialCharacters" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="d8b4d376-55bf-45c9-a2f3-dba9e95df7f1">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="2e8f9bd3-4db1-4391-a289-ace8dedcb884">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="c9464b28-6e92-43d5-a31c-9af9b15dac15">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Only PatientId"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="584c7ce3-3611-4903-9c8f-9294feb0f2cf"/>
            <con:assertion type="SOAP Fault Assertion" id="cc53b83a-d75f-4058-b875-09d19aa7fcbe"/>
            <con:assertion type="Schema Compliance" id="7118a3a4-0fbb-452e-9473-f26533194d02">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="84061850-b22b-45bd-ba39-19aa6ca3b5cd" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            <con:assertion type="GroovyScriptAssertion" id="eeaaf854-c929-4f26-8308-f703c9346b5a" name="Assert special characters"><con:configuration><scriptText><![CDATA[// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Call GetCareDocumentation#Response" )

//Läs in respons och omvandla tecken
def xml = holder.getXml()
def unescapedXml = xml.replaceAll(/&amp;/, '&')
				.replaceAll(/&lt;/, '<')
         			.replaceAll(/&gt;/, '>')
         			.replaceAll(/&quot;/, '"')
         			.replaceAll(/&apos;/, "'")

//Läs in teststrängen och omvandla tecken
def testString = context.testString
def unescapedTestString = testString.replaceAll(/&amp;/, '&')
				.replaceAll(/&lt;/, '<')
         			.replaceAll(/&gt;/, '>')
         			.replaceAll(/&quot;/, '"')
         			.replaceAll(/&apos;/, "'")

assert unescapedXml.indexOf(unescapedTestString) > -1 : "Söksträngen " + unescapedTestString + " finns inte"
]]></scriptText></con:configuration></con:assertion><con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="6fc7c03b-142e-4841-8e05-405740c23f4c" name="3 Content - SJF">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="31e78d8a-d9ac-44b4-8459-c5ff0bd34bec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="3.1 VG_VE" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="22a15fab-a245-4139-88f2-4a86fdce21af">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="aa7967a8-0a10-4054-a661-59adf97803c1">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="5cd60c16-7b8f-4aae-b93e-ae0e08538438">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="e50c24a1-5cab-42db-b99a-3f9a525b9fe3"/>
            <con:assertion type="SOAP Fault Assertion" id="1034b733-207a-4cdc-9382-6f9c1404612d"/>
            <con:assertion type="Schema Compliance" id="766936cc-5842-44b2-b06f-1a71dac717c5">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4933c3a9-2617-4f0e-ac86-bfb1b7f77cbf" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="b153bbed-0e9c-4ea6-91c1-7fcc3097cfc2" name="Assert Caregiver present">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareGiverHSAId')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8df91c18-ff4e-4185-ac67-82a2d948dd57" name="Assert Careunit present">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="61c310e2-7e06-4687-b4a3-3dc0a6008151" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="3.2 AuthorTime" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="b9375f04-8b57-4ee3-a30c-7e4794815e20">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="0c1c0e97-8ee3-4e2c-9d3f-b1a40ad0e702">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="5cd60c16-7b8f-4aae-b93e-ae0e08538438">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Only PatientId"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="e50c24a1-5cab-42db-b99a-3f9a525b9fe3"/>
            <con:assertion type="SOAP Fault Assertion" id="1034b733-207a-4cdc-9382-6f9c1404612d"/>
            <con:assertion type="Schema Compliance" id="766936cc-5842-44b2-b06f-1a71dac717c5">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4933c3a9-2617-4f0e-ac86-bfb1b7f77cbf" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="b153bbed-0e9c-4ea6-91c1-7fcc3097cfc2" name="Assert AuthorTime">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:accountableHealthcareProfessional/urn1:authorTime')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="471c0603-bf1a-4cfc-9c4d-e0491b084d44" name="4 Content - ApprovedForPatient">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="83669198-9ff3-44e5-9968-d65cb676ba74" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="4.1 ApprovedForPatient_true" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="e0e01fbd-1f14-4058-9e50-bcc737ee9068">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="1a6af0e2-baf9-404f-bbc2-522db19b45cf">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Approved-true"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert approvedForPatient true">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:approvedForPatient', 'true')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="953e367c-97b4-4cc2-9c36-7997f919bf12" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="4.2 ApprovedForPatient_false" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="11d071f2-213a-489d-957e-d415499c9146">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="ddf3d602-6e38-4813-95b3-4f5460b5aa4a">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="10e6b341-70a4-4377-8018-5a8783991bbd">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Approved-false"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="13994c7b-22d8-4bc6-ba16-5416346fe485"/>
            <con:assertion type="SOAP Fault Assertion" id="0790704a-27b8-43da-a7b0-5d330e9f7652"/>
            <con:assertion type="Schema Compliance" id="dc4a8373-fb1f-4dc0-a31d-ae8e07f95b76">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6d0099df-ca7e-4477-bf45-08e70683dd41" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="5764b230-795f-4dac-8970-96de12fa73ac" name="Assert approvedForPatient false">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:approvedForPatient', 'false')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="e7a4f1b8-1869-43f8-b104-30f919d5afc7" name="5 Content - ContractSpecific">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="f7de1480-91ac-429b-9700-bc1f69c790a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.1 signed" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="3bc131b2-d8c5-44e0-a398-5297b0809a0e">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="ef4fa27a-e094-4c2e-b815-2006f8047ec7">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="legal_included"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert legalAuthenticator included">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def legalAuthenticator = '//urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator'

ca.assertForAnyRecord(
{ record -> record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorHSAId').size() +
record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorName').size() > 0 }
, "Minst en post skall vara signerad.")</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="8ea7db07-81d3-4f74-9ab2-937b15f8973f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.2 unsigned" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="a60c85b7-9dd9-48df-9a64-81816c3e2e88">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="0998447a-9889-46f8-a9aa-2295767cd85e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="legal_excluded"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert legalAuthenticator excluded">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExcludedInAnyRecord('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="e7a9d4dd-6a70-42ad-b186-779f6485d067" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.3 locked" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="180add81-1a1b-43f9-ae79-e95cc0be203b">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="32dc59eb-cec0-4467-b24f-b17a334c09c3">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="legal_locked"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert legalAuthenticator locked">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

def legalAuthenticator = '//urn:careDocumentation/urn1:careDocumentationHeader/urn1:legalAuthenticator'

ca.assertForAnyRecord(
{ record -> record.allElementsAt(legalAuthenticator).size() > 0 &amp;&amp; 
record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorHSAId').size() == 0 &amp;&amp; 
record.allElementsAt(legalAuthenticator + '/urn1:legalAuthenticatorName').size() == 0 }
, "Minst en post skall vara låst.")</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="ddca2870-dd68-4752-8bfd-e8b345860c90" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.4 DissentingOpinion" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="78dc71bc-788b-4d15-87db-db502e67a249">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="ea1af0a6-7639-453f-bdf2-2db48da4a3ba">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert dissentingOpinion">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:dissentintOpinion')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="1d6aa37f-0946-4f6d-9467-6042c3f00339" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.5 ClinicalDocumentNoteCode_Utredning" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="e4c59a66-8300-4566-8a89-2d874e98b92c">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="68ce45e3-556a-4516-89d4-2cf099fbc94e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode utredning">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'utr')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="2dbed42a-90ee-4d5b-9015-f2d2c714e605" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.6 ClinicalDocumentNoteCode_Behandling" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="76a7c942-c99d-484f-914a-faf3e0775298">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="1b202a11-2fcc-4246-9802-9bb67b5a9332">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode behandling">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'atb')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="28268cb0-7b50-4289-bf95-8cbe7f08505b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.7 ClinicalDocumentNoteCode_Sammanfattning" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="5fe75d7b-025a-4f7b-b714-7037fde24a19">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="1cc9e8bb-e02b-4c67-a981-6c4b8586d3fa">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode sammanfattning">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'sam')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="1f976796-508b-415e-bf65-7c55a1fb16a3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.8 ClinicalDocumentNoteCode_Samordning" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="c1f3bef5-cb90-4f62-831c-81d23cd4dd7a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="466ba61f-01b6-480b-b29d-2372ee05b23c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode samordning">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'sao')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="698f244c-66ca-4176-9b5c-5f257fa33084" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.9 ClinicalDocumentNoteCode_Inskrivning" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="6579a20d-bf03-4f8b-81bc-f6573779df22">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="b513e2cd-5086-4bbd-ba95-4e6d496a2d5e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode inskrivning">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'ins')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="bd8ec7da-43b1-4f73-bf51-61e60280877c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.10 ClinicalDocumentNoteCode_Slutanteckning" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="1963c4f5-7c51-4f02-8e32-482db227c48b">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="35433097-7bdd-4164-bbb5-04677d18a4a1">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode slutanteckning">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'slu')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="42a5ac7c-c708-40b3-8f57-0cba6c6e8f64" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.11 ClinicalDocumentNoteCode_AnteckningUtanFysisktMöte" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="c3f4f206-a86b-47ba-80b3-7baddd3e0f08">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="a2499960-2158-4675-a9ae-54dcfa35d336">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode anteckning utan fysiskt mote">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'auf')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="b39d4766-cfb9-4970-a51c-c5183858cff2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.12 ClinicalDocumentNoteCode_Slutenvårdsanteckning" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="a7df9917-7b6d-4a24-8672-2a0ccfb978aa">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="e87141f8-88e6-4a78-b384-86b1875e3852">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode slutenvard">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'sva')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="abfa82a1-04c6-47f4-8f66-0ff4a0e6852a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.13 ClinicalDocumentNoteCode_Besöksanteckning" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="286d566e-ced1-4ecb-9988-546817bb8182">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="db4ce716-09fe-4d2b-9b86-5b9b353c2fdb">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert clinicalDocumentNoteCode besoksanteckning">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteCode', 'bes')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="12e3210e-4f24-4723-8569-0b2856b226cd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.14 ClinicalDocumentNoteText-DocBook" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="d4ea24e2-49f1-4471-a4e3-71667396b4e0">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="ed8c1610-187e-47b0-835a-b7ce61de7dc3">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="cd6360e8-7ddb-46b9-8f99-0fec89f83425" name="Assert ValidDocBook">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertDocBookContentInAnyElement('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteText')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="e4767e17-9a3d-4c35-926f-b0973c944c9b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.15 DocBook-extended" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="72bde254-c4cd-4b52-8d8d-e4b30db2ca11">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="b04f364b-0fa7-4e83-b912-0c671356304b">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Compliant Content Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="cb97c9fd-d721-48fb-bd40-fdd8d0e61251" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.16 MultimediaEntryValue" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="2f85ae81-611f-4e10-8c6a-77c575487f25">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="04e9d9a8-7d41-4509-8861-a3d87578ee64">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Multimedia Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert multimediaEntry/value">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:multimediaEntry/urn1:value')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="cd6360e8-7ddb-46b9-8f99-0fec89f83425" name="StoreFile">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertBase64ContentInAnyElement('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:multimediaEntry/urn1:value', context.outputFileName, 100000)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="c066a904-c12c-4fc0-996e-12afa8477848" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="5.17 MultimediaEntryReference" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="17beef7f-8ce5-4491-9dba-a53f28d7de8d">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def isBuildServer = testRunner.testCase.testSuite.project.getPropertyValue("IsBuildServer")
if(isBuildServer == 'true') {
	testRunner.cancel()
}

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation" id="e4be5771-14ab-40d4-8428-64e9e202bbd6">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation" id="f2b6d30a-fd69-4080-ab3f-2e0c5048b110">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Multimedia Response"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="1d25364f-773b-49af-85ee-23cd8d35cdb7"/>
            <con:assertion type="SOAP Fault Assertion" id="67ef2cda-fb03-4528-b987-e6b01505f250"/>
            <con:assertion type="Schema Compliance" id="0bac6e3a-4a62-4a01-babb-3ded9de33134">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c4a24875-6529-49eb-ae42-ed6800666a64" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="864624ac-ff3c-43a9-b8e5-a0a921f9fae8" name="Assert multimediaEntry/reference">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertElementExistsInAnyRecord('/urn:careDocumentation/urn1:careDocumentationBody/urn1:clinicalDocumentNote/urn1:multimediaEntry/urn1:reference')</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase><con:properties/>
  </con:testSuite>
  <con:testSuite id="91d05ad1-dc1c-48a7-a541-96294c523842" name="6 Non-functional tests">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="16fcc782-17e3-4f48-a1f3-387bf442a673" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="6.1 Loadtest" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" name="PatientId #1" id="b13297c6-e068-478c-b216-bae7e55a0979">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="PatientId #1" id="f086af79-3726-413b-8a5d-e4101bd9186d">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId1}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="89175524-e28b-4b4f-99f5-8b633a9c30b1"/>
            <con:assertion type="Response SLA Assertion" id="c6a43d4f-270f-4b0c-bdad-44e71597098c" name="Response SLA">
              <con:configuration>
                <SLA>30000</SLA>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Schema Compliance" id="77f94d9d-146f-41ae-95fb-864b0e467c91">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="265d469b-7e37-4e2b-a0bc-4fca1aa53b8c"/>
            <con:assertion type="GroovyScriptAssertion" id="62087d7f-2193-4d78-926c-3e1402c9c94d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6c2a2d9d-78c0-4443-8c2b-f2ff82991cf4" name="Assert PatientId #1">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id', context.patientId1)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="d05acbdd-1f7e-4afa-a511-092aabf97e5f" name="Assert RecordLength">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

if (context.allRecords1==null){
	context.allRecords1 = messageExchange.responseContent.size()
}
else {
	context.allRecords11=messageExchange.responseContent.size()
	assert context.allRecords1==context.allRecords11
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="PatientId #2" id="2658577f-ff22-4265-8b55-36105ce4ff3c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="PatientId #2" id="f086af79-3726-413b-8a5d-e4101bd9186d">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId2}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="89175524-e28b-4b4f-99f5-8b633a9c30b1"/>
            <con:assertion type="Response SLA Assertion" id="c6a43d4f-270f-4b0c-bdad-44e71597098c" name="Response SLA">
              <con:configuration>
                <SLA>30000</SLA>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Schema Compliance" id="77f94d9d-146f-41ae-95fb-864b0e467c91">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="265d469b-7e37-4e2b-a0bc-4fca1aa53b8c"/>
            <con:assertion type="GroovyScriptAssertion" id="62087d7f-2193-4d78-926c-3e1402c9c94d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6c2a2d9d-78c0-4443-8c2b-f2ff82991cf4" name="Assert PatientId #2">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id', context.patientId2)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="57653efe-11c6-489b-8fa1-c1cfd596b8f6" name="Assert RecordLength">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)

if (context.allRecords2==null){
	context.allRecords2 = messageExchange.responseContent.size()
}
else {
	assert context.allRecords2==messageExchange.responseContent.size()
}</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:loadTest id="f9d8b9fd-781a-405c-bd5d-f57b27841463" name="6.1.1 Grund">
        <con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings>
        <con:threadCount>10</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>180</con:testLimit>
        <con:limitType>TIME</con:limitType>
        <con:loadStrategy>
          <con:type>Simple</con:type>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:assertion type="Max Errors" name="Max Errors">
          <con:configuration>
            <name>Max Errors</name>
            <max-absolute-errors>0</max-absolute-errors>
            <max-relative-errors>0.2</max-relative-errors>
            <test-step>- Total -</test-step>
          </con:configuration>
        </con:assertion>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
      </con:loadTest>
      <con:loadTest id="ac1825de-9362-4541-a6ec-5516fa462d4d" name="6.1.2 Uthållighet">
        <con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings>
        <con:threadCount>5</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>1800</con:testLimit>
        <con:limitType>TIME</con:limitType>
        <con:loadStrategy>
          <con:type>Variance</con:type>
          <con:config>
            <interval>60000</interval>
            <variance>1.0</variance>
          </con:config>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:assertion type="Max Errors" name="Max Errors">
          <con:configuration>
            <name>Max Errors</name>
            <max-absolute-errors>0</max-absolute-errors>
            <max-relative-errors>0.2</max-relative-errors>
            <test-step>- Total -</test-step>
          </con:configuration>
        </con:assertion>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
      </con:loadTest>
      <con:setupScript>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testCase.getName())</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="9d6d3e52-06e4-431e-a07e-9f84368fa1b5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="6.2 Recovery" searchProperties="true">
      <con:settings/>
      <con:testStep type="request" name="PatientId #1" id="f2e8ce60-a3ee-4840-823c-b32f44279088">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="PatientId #1" id="f086af79-3726-413b-8a5d-e4101bd9186d">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId1}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="89175524-e28b-4b4f-99f5-8b633a9c30b1"/>
            <con:assertion type="Schema Compliance" id="77f94d9d-146f-41ae-95fb-864b0e467c91">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="265d469b-7e37-4e2b-a0bc-4fca1aa53b8c"/>
            <con:assertion type="GroovyScriptAssertion" id="62087d7f-2193-4d78-926c-3e1402c9c94d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6c2a2d9d-78c0-4443-8c2b-f2ff82991cf4" name="Assert PatientId #1">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id', context.patientId1)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="PatientId #2" id="41f8b9ce-2935-4c07-8181-6880bceaff21">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="PatientId #2" id="f086af79-3726-413b-8a5d-e4101bd9186d">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId2}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="89175524-e28b-4b4f-99f5-8b633a9c30b1"/>
            <con:assertion type="Schema Compliance" id="77f94d9d-146f-41ae-95fb-864b0e467c91">
              <con:configuration/>
            </con:assertion>
            <con:assertion type="SOAP Response" id="265d469b-7e37-4e2b-a0bc-4fca1aa53b8c"/>
            <con:assertion type="GroovyScriptAssertion" id="62087d7f-2193-4d78-926c-3e1402c9c94d" name="Assert Schematron">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6c2a2d9d-78c0-4443-8c2b-f2ff82991cf4" name="Assert PatientId #2">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange)
ca.assertSpecificValueInAllRecords('/urn:careDocumentation/urn1:careDocumentationHeader/urn1:patientId/urn1:id', context.patientId2)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:loadTest id="32a308b7-8b45-4357-bce6-7364f5194999" name="6.2.1 Återhämtning">
        <con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings>
        <con:threadCount>11</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>300</con:testLimit>
        <con:limitType>TIME</con:limitType>
        <con:loadStrategy>
          <con:type>Thread</con:type>
          <con:config>
            <startThreadCount>10</startThreadCount>
            <endThreadCount>100</endThreadCount>
          </con:config>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:assertion type="Max Errors" name="Max Errors">
          <con:configuration>
            <name>Max Errors</name>
            <max-absolute-errors>10</max-absolute-errors>
            <max-relative-errors>0.2</max-relative-errors>
            <test-step>- Total -</test-step>
          </con:configuration>
        </con:assertion>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
      </con:loadTest>
      <con:setupScript>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testCase.getName())</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="c6d62dd0-b1b9-4804-adbe-066100ce4910" name="7 Consumer tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="7.1 CareUnit_Blacklisted" searchProperties="true" id="024f1eb1-8e38-4f0e-8c09-a8a2fdc87ba9">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="5b936164-865d-4915-aaa4-b21681bb9a7a">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation 1" id="ce9e6bbb-5977-48db-90a0-8098217cfe31">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation 1" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="1c07f521-2353-43d1-ad37-4678d460ca12" name="Assert nonempty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Räkna antalet poster" id="1dcd4666-2e75-4f2e-8885-1562c385d5e5">
        <con:settings/>
        <con:config>
          <script>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Call GetCareDocumentation 1#Response" )
def path = testRunner.testCase.testSuite.project.getPropertyValue("RecordElementPath")
holder.declareNamespace("urn", "urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2")
holder.declareNamespace("urn1", "urn:riv:clinicalprocess:healthcond:description:2")

log.info path

def numberOfposts = holder["count(${path})"]
context.testCase.setPropertyValue("Poster request 1",numberOfposts)
log.info numberOfposts</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation 2" id="8167183e-f117-483c-8bde-8737a16dca59">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation 2" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Http-header Filter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId2}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            <con:assertion type="GroovyScriptAssertion" id="19dc22f4-6511-4098-a173-7c940025da8d" name="Assert Antal filtrerade poster">
              <con:configuration>
                <scriptText>// create groovyUtils and XmlHolder for response of Request 1 request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "Call GetCareDocumentation 2#Response" )
def path = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("RecordElementPath")
holder.declareNamespace("urn", "urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2")
holder.declareNamespace("urn1", "urn:riv:clinicalprocess:healthcond:description:2")

log.info path

def numberOfposts = holder["count(${path})"]
context.testCase.setPropertyValue("Poster request 2",numberOfposts)

def AntalPosterRequest1 = context.testCase.getPropertyValue("Poster request 1")
def AntalPosterRequest2 = context.testCase.getPropertyValue("Poster request 2")
log.info "Post 1: " + AntalPosterRequest1
log.info "Post 2: " +  AntalPosterRequest2

assert AntalPosterRequest1 > AntalPosterRequest2 : "Antalet poster efter filtrering är inte färre än antalet poster före filtrering"</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple NotContains" id="770bce4f-fe2d-422b-8439-9be0b78b39db" name="Not Contains">
              <con:configuration>
                <token>${filterString}</token>
                <ignoreCase>true</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>myProperty</con:name>
          <con:value>numberOfLinksInParagraphs</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 1</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 2</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="7.2 Consumer_Blacklisted" searchProperties="true" id="2a5a60d4-65f8-40c0-bf42-ed8ada7212d4">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="9bfccc4c-5f17-4298-b3b2-d8ee79e3c3e9">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation 1" id="1a2e99ad-6ea9-44ff-b941-9e135ccf501f">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation 1" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="1c07f521-2353-43d1-ad37-4678d460ca12" name="Assert nonempty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      <con:testStep type="request" name="Call GetCareDocumentation 2" id="e9eae255-d02e-48e0-83b5-e07ab21732e9">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation 2" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId2}"/>
  &lt;con:entry key="x-mock-response" value="Empty Response"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            <con:assertion type="GroovyScriptAssertion" id="19dc22f4-6511-4098-a173-7c940025da8d" name="Assert empty response">
              <con:configuration><scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertExactNumberOfRecords(0)
</scriptText></con:configuration>
            </con:assertion>
            
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>myProperty</con:name>
          <con:value>numberOfLinksInParagraphs</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 1</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 2</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="7.3 Consumer_Independent" searchProperties="true" id="85588f37-0dec-4b8a-a64e-80f99c4ba5f5">
      <con:settings/>
      <con:testStep type="groovy" name="Read data" id="79c30560-91ef-4199-b3f5-ae925011b972">
        <con:settings/>
        <con:config>
          <script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load(testRunner.testCase.getName())</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Call GetCareDocumentation 1" id="6f611fff-eb18-4cf3-8672-17cc00e38715">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation 1" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="1c07f521-2353-43d1-ad37-4678d460ca12" name="Assert nonempty response">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertNonEmptyResponse()</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      
      
      <con:testStep type="request" name="Call GetCareDocumentation 2" id="5edc0ad2-6797-4c3a-8626-5ccc7030fce8">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>GetCareDocumentationResponderBinding</con:interface>
          <con:operation>GetCareDocumentation</con:operation>
          <con:request name="Call GetCareDocumentation 2" id="f193fa75-4823-424f-b2d3-d2087bbe3672">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId2}"/>
  &lt;con:entry key="x-mock-response" value="Http-header Prefilter2"/>
&lt;/xml-fragment></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${webServiceUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:description:2">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetCareDocumentation>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetCareDocumentation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" name="SOAP Response" id="b1abc329-d716-4ec9-9c77-6a0b8d68e622"/>
            <con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="f3092a89-b0df-40f6-a050-9b62331916bb"/>
            <con:assertion type="Schema Compliance" name="Schema Compliance" id="23f7b617-a204-4a19-b693-91ee7ae9799f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert Schematron" id="13f36c63-e4b8-4c83-a9a2-ea47f473bc65">
              <con:configuration>
                <scriptText>import se.skl.rivta.tksupport.soapui.ContentAssertions
def ca = new ContentAssertions(context, messageExchange, log)
ca.assertSchematronConstraints()</scriptText>
              </con:configuration>
            </con:assertion>
            
            
            
            <con:credentials>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="AssertSameResponse" id="791fda79-92c7-4efd-9143-927c795ae4f4"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// Hämta responser och nolla logId för att kunna jämföra svaren
def holder1 = groovyUtils.getXmlHolder( "Call GetCareDocumentation 1#Response" )
def xml1 = new XmlSlurper().parseText(holder1.getXml())
xml1.Body.GetCareDocumentationResponse.result.logId = 0

def holder2 = groovyUtils.getXmlHolder( "Call GetCareDocumentation 2#Response" )
def xml2 = new XmlSlurper().parseText(holder2.getXml())
xml2.Body.GetCareDocumentationResponse.result.logId = 0

assert xml1 == xml2 : "Konsumenterna får inte samma svar"</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>myProperty</con:name>
          <con:value>numberOfLinksInParagraphs</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 1</con:name>
          <con:value>2</con:value>
        </con:property>
        <con:property>
          <con:name>Poster request 2</con:name>
          <con:value>2</con:value>
        </con:property>
      <con:property><con:name>Poster request 1: </con:name><con:value>2</con:value></con:property><con:property><con:name>Poster request 2: </con:name><con:value>2</con:value></con:property></con:properties>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase><con:properties/></con:testSuite><con:requirements/>
  <con:properties>
    <con:property>
      <con:name>xmlns:urn</con:name>
      <con:value>urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2</con:value>
    </con:property>
    <con:property>
      <con:name>xmlns:urn1</con:name>
      <con:value>urn:riv:clinicalprocess:healthcond:description:2</con:value>
    </con:property>
    <con:property>
      <con:name>RecordElementPath</con:name>
      <con:value>//urn:careDocumentation</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>