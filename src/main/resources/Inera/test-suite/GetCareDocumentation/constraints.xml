<?xml version="1.0" encoding="utf-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements. See the NOTICE file
distributed with this work for additional information
regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
to you under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the
specific language governing permissions and limitations
under the License.
-->
<iso:schema
        xmlns="http://purl.oclc.org/dsdl/schematron"
        xmlns:iso="http://purl.oclc.org/dsdl/schematron"
        queryBinding='xslt2'
        schemaVersion='ISO19757-3'>

    <iso:title>Validation for GetCareDocumentation</iso:title>

    <iso:ns prefix='urn' uri='urn:riv:clinicalprocess:healthcond:description:GetCareDocumentationResponder:2' />
    <iso:ns prefix='urn1' uri='urn:riv:clinicalprocess:healthcond:description:2' />
	<iso:ns prefix='urn2' uri='urn:riv:clinicalprocess:healthcond:description:2.1' />

	<iso:ns prefix='soapenv' uri='http://schemas.xmlsoap.org/soap/envelope/'/>

	<!-- Rules for abstract patterns -->
	<iso:pattern abstract="true" id="pattern.CvType">
		<iso:rule context="$path">
			<iso:assert test="count(urn1:code) + count(urn1:originalText) = 1">
				In $path, either code or originalText must be given.</iso:assert>
		</iso:rule>
		<iso:rule context="$path/urn1:code">
			<iso:assert test="count(../urn1:codeSystem) + count(../urn1:displayName) = 2">
				In $path if <iso:name/> is given, codeSystem and displayName must be given.</iso:assert>
			<iso:assert test="count(../urn1:originalText)= 0">
				In $path if <iso:name/> is given, originalText must not be given.</iso:assert>
		</iso:rule>
		<iso:rule context="$path/urn1:codeSystem">
			<iso:assert test="count(../urn1:code) + count(../urn1:displayName) = 2">
				In $path if <iso:name/> is given, code and displayName must be given.</iso:assert>
			<iso:assert test="count(../urn1:originalText)= 0">
				In $path if <iso:name/> is given, originalText must not be given.</iso:assert>
			<iso:assert test="matches(.,'^[0-2](\.([0-9])+)+$')">
                Element 'codeSystem' must be an OID for the current codeSystem.</iso:assert>
		</iso:rule>
		<iso:rule context="$path/urn1:displayName">
			<iso:assert test="count(../urn1:code) + count(../urn1:codeSystem) = 2">
				In $path if <iso:name/> is given, code and codeSystem must be given.</iso:assert>
			<iso:assert test="count(../urn1:originalText)= 0">
				In $path if <iso:name/> is given, originalText must not be given.</iso:assert>
		</iso:rule>
		<iso:rule context="$path/urn1:originalText">
			<iso:assert test="count(../urn1:code) + count(../urn1:codeSystem) + count(../urn1:displayName) = 0">
				In $path if <iso:name/> is given, code, codeSystem and displayName must not be given.</iso:assert>
		</iso:rule>
	</iso:pattern>
	
	<!-- Elements that implements abstract patterns -->
	<iso:pattern id="healthcareProfessionalRoleCode" is-a="pattern.CvType">
		<iso:param name="path" value="urn1:healthcareProfessionalRoleCode" />
    </iso:pattern>
	
	
	<!--                            -->
	<!-- Rules for various elements -->
	<!--                            -->
	
    <iso:pattern id="clinicalDocumentNote">
        <iso:rule context="urn1:clinicalDocumentNote">
            <iso:assert test="count(urn1:clinicalDocumentNoteCode) + count(urn1:clinicalDocumentTypeCode) = 1">
                Element clinicalDocumentNote: One of clinicalDocumentNoteCode or clinicalDocumentTypeCode must be given, but not both.</iso:assert>
        </iso:rule>
    </iso:pattern>

    <iso:pattern id="careDocumentationBody">
        <iso:rule context="urn1:careDocumentationBody">
            <iso:assert test="count(urn1:clinicalDocumentNote/urn1:clinicalDocumentNoteText) + count(urn1:clinicalDocumentNote/urn1:multimediaEntry) = 1">
                Element careDocumentationBody: One of clinicalDocumentNoteText or multimediaEntry must be given, but not both.</iso:assert>
        </iso:rule>
    </iso:pattern>

    <iso:pattern id="multimediaEntry">
        <iso:rule context="urn1:multimediaEntry">
            <iso:assert test="not(urn1:id)">Element multimediaEntry: element 'id' must not be given.</iso:assert>
			<iso:assert test="count(urn1:value) + count(urn1:reference) = 1">Element multimediaEntry: one of 'value' or 'reference' must be given, but not both.</iso:assert>
        </iso:rule>
    </iso:pattern>

    <iso:pattern id="careDocumentationHeader">
        <iso:rule context="urn1:careDocumentationHeader">
			<!-- nullified removed from TKB but still in schema -->
            <iso:assert test="not(urn1:nullified)">Element careDocumentationHeader must not contain 'nullified'.</iso:assert>
            <iso:assert test="not(urn1:nullifiedReason)">Element careDocumentationHeader must not contain 'nullifiedReason'.</iso:assert>
            <!-- documentTime mandatory according to TKB but not in schema -->
            <iso:assert test="urn1:documentTime">Element careDocumentationHeader: documentTime must be given.</iso:assert>
        </iso:rule>
    </iso:pattern>
	
    <iso:pattern id="accountableHealthcareProfessional">
        <iso:rule context="urn1:accountableHealthcareProfessional">
            <iso:assert test="urn1:healthcareProfessionalOrgUnit">Element accountableHealthcareProfessional: healthcareProfessionalOrgUnit must be given.</iso:assert>
            <iso:assert test="urn1:healthcareProfessionalCareUnitHSAId">Element accountableHealthcareProfessional: healthcareProfessionalCareUnitHSAId must be given.</iso:assert>
            <iso:assert test="urn1:healthcareProfessionalCareGiverHSAId">Element accountableHealthcareProfessional: healthcareProfessionalCareGiverHSAId must be given.</iso:assert>
        </iso:rule>
    </iso:pattern>

    <iso:pattern id="Verify result element">
		<iso:rule context="urn:GetCareDocumentationResponse">
			<iso:assert test="urn2:result">The response must contain element 'result'.</iso:assert>
		</iso:rule>
        <iso:rule context="urn2:result">
            <iso:assert test="count(urn2:resultCode) = 1">Element result must contain exactly one resultCode element.</iso:assert>
            <iso:assert test="count(urn2:logId) = 1">Element result must contain exactly one logId element.</iso:assert>
        </iso:rule>
    </iso:pattern>
	
	<iso:pattern id="Verify non-empty elements">
        <iso:rule context="soapenv:Body/urn:GetCareDocumentationResponse//*">
		    <iso:assert test="normalize-space(.)">Element <iso:name /> is included but empty. All elements included in the response must have valid values.</iso:assert>
        </iso:rule>
    </iso:pattern>
	
	<iso:pattern id="Verify unique recordId">
		<iso:rule context="urn:GetCareDocumentationResponse">
			<let name="recordIdPath" value="urn:careDocumentation/urn1:careDocumentationHeader/urn1:documentId"/>
			<iso:assert test="count($recordIdPath) = count(distinct-values($recordIdPath))">Element 'documentId' must contain unique id's</iso:assert>
		</iso:rule>
	</iso:pattern>
	
</iso:schema>
